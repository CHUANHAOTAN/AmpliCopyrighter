#!/usr/bin/env perl

# estimate_species_trait
# Copyright 2012 Florent Angly
# You may distribute this module under the terms of the GPLv3


=head1 NAME

estimate_species_trait - Estimate the value of a trait for species using
phylogenetic independent contrasts

=head1 SYNOPSIS

  estimate_species_trait -f trait.txt -p gg.tree -t gg_taxo.txt > trait_summary.txt

=head1 DESCRIPTION

This script takes a trait in different species and estimates the trait value
for other species using the phylogenetic independent contrasts method with
rerooting: Garland & Ives "Using the Past to Predict the Present" 2000

=head1 REQUIRED ARGUMENTS

=over

=item -i <input_file>

Input file of tab-delimited traits. This file should have been generated by the
script data_combiner. This script will use the column called 'GG ID' and the
one specified by the option <trait_name>.

=for Euclid:
   input_file.type: readable

=item -p <phylo_tree>

Input Greengenes phylogenetic tree in Newick format. Note that tree leaf names
should be a Greengenes ID and that internal node names should be annotated
with Greengenes taxonomic information, e.g. 'g__Sphingomonas', where appropriate.

=for Euclid:
   phylo_tree.type: readable

=item -t <taxo_file>

Input Greengenes taxonomy file.

=for Euclid:
   taxo_file.type: readable

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -n <trait_name>

If the input file contains several traits, select the name of the trait to use
(case-insensitive), e.g. '16S rRNA Count' or 'Genome Size'. Make sure this
matches the name of the trait as found in the input file. Default: trait_name.default

=for Euclid:
   trait_name.type: string
   trait_name.default: '16S rRNA Count'

=item -a <avg_outliers>

Remove trait values inconsistent with the trait average for this IMG ID: 1=yes,
0=no. Default: avg_outliers.default

=for Euclid:
   avg_outliers.type: integer, avg_outliers == 0 || avg_outliers == 1
   avg_outliers.default: 1

=back

=head1 AUTHOR

Florent Angly <florent.angly@gmail.com>

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012 Florent Angly

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use Method::Signatures;
use Statistics::Basic qw(mean);
use Getopt::Euclid qw(:minimal_keys);
use Data::Dump qw(dump);
use Bio::Tree::Tree;
use Bio::Phylo::IO;
use Bio::Community::TaxonomyUtils;
use FindBin qw($Bin);
use lib "$Bin";
use PreprocUtils;

use constant NONZERO => 1e-5;
use constant DEBUG   => 0;

my $gg_taxonomy;
estimate_species_trait( $ARGV{'i'}, $ARGV{'p'}, $ARGV{'t'}, $ARGV{'n'}, $ARGV{'a'} );
exit;


func estimate_species_trait ( $input_file, $phylo_tree, $taxo_file, $trait_name, $avg_outliers ) {
   my $tax2trait = read_metadata($input_file, $trait_name);
   if ($avg_outliers) {
      $tax2trait = remove_outliers($tax2trait);
   }
   $tax2trait = estimate_trait($phylo_tree, $tax2trait);
   $tax2trait = map_tree_to_taxo($tax2trait, $taxo_file);
   $tax2trait = PreprocUtils::average_by_key($tax2trait);
   print_results($tax2trait, $trait_name);
   return 1;
}


func map_tree_to_taxo ($tax2trait, $taxo_file) {
   # Convert leaf ID from GG ID to GG taxo
   my $taxonomy = PreprocUtils::read_lookup($taxo_file);
   for my $id (keys %$tax2trait) {
      my $val    = $tax2trait->{$id};
      my $taxstr = $taxonomy->{$id};
      if (defined $taxstr) {
         push @{$tax2trait->{$taxstr}}, @$val;
         delete $tax2trait->{$id};
      }
   }
   return $tax2trait;
}


func estimate_trait($tree_file, $tax2trait) {
   # Estimate the trait value for leaves that do not have it
   my @ids_to_keep = keys $tax2trait;
   my $all_leaf_ids = read_leaf_names($tree_file);
   open my $out, '>', 'tmp_estimate.txt' or die "Error: Could not write file $!\n";
   my %trait_estimates;
   for my $id (@$all_leaf_ids) {
      next if exists $tax2trait->{$id};
      push @ids_to_keep, $id;
      my $tree = grow_tree($tree_file, \@ids_to_keep, $tax2trait);
      my $val = leaf_pic($id, $tree);
      print $out "$id\t$val\n";
      $trait_estimates{$id} = $val;
      pop @ids_to_keep;
   }
   close $out;
   # Add estimates to given trait values
   for my $id (keys %trait_estimates) {
      push @{$tax2trait->{$id}}, delete $trait_estimates{$id};
   }
   undef %trait_estimates;
   return $tax2trait;
}


func read_leaf_names ($tree_file) {
   # Read leaf names from Neick file, assuming that the tree has branch lengths
   my $nw_string = clean_newick($tree_file);
   my @leaf_names = ($nw_string =~ m/[(,]([a-z0-9]+?):/gi);
   warn "Info: Found ".scalar(@leaf_names)." leaves in tree $tree_file\n";
   warn "leaf_names: ".dump(\@leaf_names)."\n"; ####
   return \@leaf_names;
}


func leaf_pic ($gg_id, $tree) {
   # Use phylogenetic independent contrasts method to estimate and return the
   # trait value for the given leaf node. Tree should be pruned will be modified
   # IN-PLACE!
   my $val;
   my $leaf = $tree->get_by_name($gg_id);
   my $name = get_short_name($leaf);
   warn "Info: Applying phylogenetic independent contrasts to leaf $name\n";
   # Reroot tree
   $tree = custom_reroot($tree, $leaf);
   # Do phylogenetic independent contrasts
   my $round_num = 0;
   PIC: while (1) {
      # Get and count apples and cherries
      $round_num++;
      #warn "Info: round $round_num\n";
      my $cherries     = get_cherries($tree);
      my $num_cherries = number_of_cherries($cherries);
      my $apples       = get_apples($tree);
      my $num_apples   = number_of_apples($apples);
      my $num_fruits   = $num_cherries + $num_apples;
      last if $num_fruits <= 0;
    
      # Process and remove cherries and apples
      for my $nodes (values %$cherries, values %$apples) {
         my ($parent, @children) = @$nodes;
         $parent = process_fruit_by_pic($parent, \@children);
         if (get_short_name($parent) eq $name) {
            $val = $parent->get_generic('trait');
            last PIC;
         }
      }
   }
   # Check that only a single leaf remains
   my $nof_leaves  = $tree->calc_number_of_terminals;
   if (not ($nof_leaves == 1)) {
      my $out_file = 'tree_debug.nw';
      PreprocUtils::write_tree($tree, $out_file);
      die "Error: Internal problem. There should be only one leaf left and no ".
          "internal nodes but there are still $nof_leaves leaves. Wrote what's".
          " left of the tree in the Newick file $out_file for debugging\n";
   }

   warn "Info: Estimated trait value was $val\n";
   return $val;
}


sub custom_reroot {
   my ($tree, $new_root) = @_;
   my $old_root = $tree->get_root;
   $tree->reroot($new_root);
   $old_root->set_name('LUCA');
   my @lineage = ($old_root, @{$old_root->get_ancestors});
   for my $i (0 .. scalar @lineage-2) {
      my $node   = $lineage[$i];
      my $parent = $lineage[$i+1];
      $node->set_branch_length($parent->get_branch_length);
   }   
   return $tree;
}


func remove_outliers ($tax2trait) {
   my $num_inconsistent = 0;
   my $num_fixed = 0;
   for my $id (keys %$tax2trait) {
      my $vals = $tax2trait->{$id};
      if (scalar @$vals > 1) {
         my $mean = mean($vals)->query;
         my $inconsistent = 0;
         my $fixed = 0;
         my $msg = "Warn: Outlier detected: $id => [".join(', ',@$vals)."].";
         for (my $i = 0; $i <= scalar @$vals - 1; $i++) {
            my $val = $vals->[$i];
            if (not PreprocUtils::near_avg_ssu($val, $mean)) {
               $inconsistent = 1;
               $num_inconsistent++;
               if ($val == 1) {
                  # Remove an outlier (1s seem to be frequent errors)
                  splice @$vals, $i, 1;
                  $i--;
                  $fixed = 1;
                  $num_fixed++;
               }
            }
         }
         if ($fixed) {
            $msg .= " Corrected to [".join(', ',@$vals)."].";
            $tax2trait->{$id} = $vals;
         } else {
            $msg .= " Uncorrected.";
         }
         if ($inconsistent) {
            warn "$msg\n";
         }
      }
   }
   warn "Warn: Found $num_inconsistent inconsistent trait values and corrected $num_fixed of those.\n";
   return $tax2trait;
}


func print_results ($tax2trait, $trait_name) {
   # Print results, sorted by taxonomic level and alphabetically within each level
   # Sort results by taxonomic level
   print "# taxonomy\t$trait_name\n";
   for my $tax ( sort keys %$tax2trait ) {
      my $val = sprintf('%.5f', $tax2trait->{$tax});
      print "$tax\t$val\n";
   }
   print "\n";
   return 1;
}


func process_fruit_by_pic ($parent, $children) {
   # Calculate trait value for parent $pval as a weighted average of the
   # children's trait value @cvals where the weights $weis are proportional
   # to the inverse of the branch distance @dists between parent and
   # children. Hence, the trait value of a child closer to the parent
   # contributes more than the trait value of a childr that is farther away.
   # Note: This function works with a single child or two children
   my $pval;
   my @cvals;
   for my $child (@$children) {
      my $cval = $child->get_generic('trait');
      if (not defined $cval) {
         last;
      } else {
         push @cvals, $cval;
      }
   }
   my $pdist = $parent->get_branch_length || 0;
   my @cdists = map { 0+$_->get_branch_length || NONZERO } @$children;

   if (scalar @$children == 2) {
      # Calculate trait value for parent
      my @weis = map { 1 / $_ } @cdists;
      $pval = ($cvals[0]*$weis[0] + $cvals[1]*$weis[1]) / ($weis[0]+$weis[1]);
      # Stretch parent's branch 
      if ( ($cdists[0] > 0) && ($cdists[1] > 0) ) {
         $pdist += $cdists[0]*$cdists[1] / ($cdists[0]+$cdists[1]);
      }
   } elsif (scalar @$children == 1) {
      $pval  = $cvals[0];
      $pdist += $cdists[0];
   } else {
      die "Error: node had more than two children\n";
   }
   $parent->set_generic('trait' => $pval);
   $parent->set_branch_length($pdist);

   print_nodes($parent, @$children) if DEBUG;

   # Delete children
   for my $child (@$children) {
      $parent->prune_child($child);
   }

   return $parent;
}


func get_apples (Bio::Phylo::Forest::Tree $tree) {
   # Find apples in the tree and report them in a hash, keyed by the parent ID
   return get_fruits($tree, 1);
}


func number_of_apples ($apples) {
   return scalar keys %$apples;
}


func get_cherries (Bio::Phylo::Forest::Tree $tree) {
   # Find cherries in the tree and report them in a hash, keyed by the parent ID
   return get_fruits($tree, 2);
}


func number_of_cherries ($cherries) {
   return 2 * (scalar keys %$cherries);
}


func get_fruits (Bio::Phylo::Forest::Tree $tree, Int $num_children) {
   # Find apples in the tree and report them in a hash, keyed by the parent ID
   my %fruits;
   for my $tip ( @{ $tree->get_terminals } ) {
      if ( my $parent = $tip->get_parent ) {
         if ( $parent->is_preterminal ) {
            my $children = $parent->get_children;
            my $pid = $parent->get_id;
            if ( (scalar @{$children} == $num_children) && (not exists $fruits{$pid}) ) {
               $fruits{$pid} = [$parent, @$children];
            }
         }
      }
   }
   return \%fruits;
}


func print_nodes ($parent, $child1?, $child2?) {
   # Print node info for parent and optional two children
   my $msg;
   if ($child1) {
      $msg .= "CHILD1: '".(get_full_name($child1)||'?')."' (uid ".$child1->get_id.") = ".($child1->get_generic('trait')||"")."\n";
   }
   if ($child2) {
      $msg .= "CHILD2: '".(get_full_name($child2)||'?')."' (uid ".$child2->get_id.") = ".($child2->get_generic('trait')||"")."\n";
   }
   $msg    .= "PARENT: '".(get_full_name($parent)||'?')."' (uid ".$parent->get_id.") = ".($parent->get_generic('trait')||"")."\n";
   warn "$msg\n";
   return 1;
}


func grow_tree ($tree_file, $gg_ids, $tax2trait) {
   # Read and clean Newick string, parse it, then prune it and attach trait.
   # $gg_ids are node names to keep; all the other ones are pruned. If no
   # $gg_ids are provided, keep all nodes.

   my $tree;
   my $num_leaves;
   #warn "Info: Cleaning tree $tree_file ...\n";
   my $tree_string = clean_newick($tree_file);
   PreprocUtils::write_tree($tree_string, 'debug1.nw') if DEBUG;

   #warn "Info: Parsing tree...\n";
   my %args = ( -string => $tree_string, -format => 'newick' );
   if (defined $gg_ids) {
      $args{-keep} = $gg_ids; # keep only the nodes we need
   }
   $tree = Bio::Phylo::IO->parse( %args )->first;
   #warn "Info: Saw ".$tree->calc_number_of_terminals()." tree leaves\n";

   if (defined $gg_ids) {
      #warn "Info: Pruning tree...\n";
      $tree->keep_tips($gg_ids);
      $num_leaves = $tree->calc_number_of_terminals;
      #warn "Info: $num_leaves tree leaves left\n";
      my $num_ids = scalar keys $gg_ids;
      if ( $num_ids != $num_leaves ) {
         warn "Warn: Looks like the tree is missing ".($num_ids-$num_leaves)." GG IDs\n";
      }
   }

   $tree = attach_trait_to_tree ($tree, $tax2trait);

   return $tree;
}


func print_tree_nodes ($tree, $file) {
   # Given a Bio::Phylo::Forest::Tree, write the name of its node in the
   # specified file name.
   open my $out, '>', $file or die "Error: Could not write file $file\n$!\n";
   for my $node (@{$tree->get_entities}) {
      print $out $node->get_id.":  ".(get_full_name($node)||"''")."\n";
   }
   close $out;
   return 1;
}


func clean_newick ($file) {
   # Sanitize some characters and workaround tree re-rooting issue
   my $nw_string;
   open my $in, '<', $file or die "Error: Could not read file $file\n$!\n";
   while (my $line = <$in>) {
      # Replace semicolons and whitespaces in node names
      $line =~ s/'(.*?)'/replace_chars("'$1'")/ge;
      $line =~ s/\)\d+/)/g;
      $nw_string .= $line;
   }
   close $in;
   # Add explicit node root to facilitate re-rooting
   chomp $nw_string;
   $nw_string =~ s/;$//;
   $nw_string = '('.$nw_string.'LUCA);';
   return $nw_string;
}


func replace_chars ($string) {
   # Replace any semicolon in the given string by '.,' and any space by '\s'
   $string =~ s/;/.,/g;
   $string =~ s/ /\\s/g;
   return $string;
}


func restore_chars ($string) {
   # Restore any '.,' to semicolon and any '\s' to space
   $string =~ s/.,/;/g;
   $string =~ s/\\s/ /g;
   return $string;
}


func get_full_name ($node) {
   # Get node name, replace semicolons and unquote it. If the name is not an ID
   # but part of a taxonomic string, e.g. 'g__Bacteroides' or 's__Bacteroides salyersiae'
   # reconstruct the full taxonomic string
   my $name = get_short_name($node);
   if ( not is_id($name) ) {
      while (1) {
         $node = $node->get_parent;
         if (not defined $node) {
            last;
         }
         my $parent_name = clean_name($node->get_name);
         if ( not is_id($parent_name) ) {
            $name = $parent_name.'; '.$name;
         }
      }
   }
   return $name;
}


func get_short_name ($node) {
   return clean_name($node->get_name);
}


func is_id ($str) {
   # Returns true is given string contains only numerals 0-9
   return( ($str =~ m/[^0-9]/) ? 0 : 1 );
}


func clean_name ($name) {
   $name = restore_chars($name);
   $name =~ s/^'(.*)'$/$1/;
   $name =~ s/^"(.*)"$/$1/;
   return $name;
}


func read_metadata ( $file, $trait_name ) {
   my %tax2trait;
   open my $fh, '<', $file or die "Error: Could not read file $file\n$!\n";
   my $header = <$fh>;
   chomp $header;
   my @cols = PreprocUtils::find_column_for($header, 'GG ID', $trait_name);
   warn "Info: Found trait '$trait_name' in column ".($cols[-1]+1)." of input ".
        "file $file\n";
   # Parse input file
   my $num = 0;
   while (my $line = <$fh>) {
      chomp $line;
      next if $line =~ m/^#/;
      my ($gg_id, $trait_val) = (split /\t/, $line)[@cols];
      if ( (not defined $gg_id) || ($gg_id eq '-') ) {
         next;
      }
      if ( (not defined $trait_val) || ($trait_val eq '-') ) {
         next;
      }
      push @{$tax2trait{$gg_id}}, $trait_val;
      $num++;
   }
   close $fh;
   warn "Info: Read $num entries with a GG ID and a trait value\n";
   return \%tax2trait;
}


func attach_trait_to_tree ($tree, $trait_vals) {
   while ( my ($name, $trait_val) = each %$trait_vals ) {
      my $node = $tree->get_by_name($name) ||
         die "Error: Could not find tree node with name $name\n";
      if (ref $trait_val eq 'ARRAY') {
         $trait_val = mean($trait_val)->query;
      }
      $node->set_generic( 'trait' => $trait_val );
   }
   return $tree;
}

