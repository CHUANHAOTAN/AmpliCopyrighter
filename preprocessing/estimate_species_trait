#!/usr/bin/env perl

# estimate_species_trait
# Copyright 2012 Florent Angly
# You may distribute this module under the terms of the GPLv3


=head1 NAME

estimate_species_trait - Estimate the value of a trait for species using
phylogenetic independent contrasts

=head1 SYNOPSIS

  estimate_species_trait -f trait.txt -p gg.tree -t gg_taxo.txt > trait_summary.txt

=head1 DESCRIPTION

This script takes a trait in different species and estimates the trait value
for other species using the phylogenetic independent contrasts method with
rerooting: Garland & Ives, "Using the Past to Predict the Present", 2000

To do so, it uses the Newick Utils programs and Bio::Phylo Perl modules.

=head1 REQUIRED ARGUMENTS

=over

=item -i <input_files>...

Input files of tab-delimited traits. This script will use the column called
'GG ID' and the one specified by the option <trait_name>. The first file is
assumed to be experimental trait values for Greengene IDs, while optional extra
files are assumed to be trait values that have already be estimated and do not
need to be recalculated.

=for Euclid:
   input_files.type: readable

=item -p <phylo_tree>

Input Greengenes phylogenetic tree in Newick format. Note that tree leaf names
should be a Greengenes ID and that internal node names should be annotated
with Greengenes taxonomic information, e.g. 'g__Sphingomonas', where appropriate.

=for Euclid:
   phylo_tree.type: readable

=item -t <taxo_file>

Input Greengenes taxonomy file.

=for Euclid:
   taxo_file.type: readable

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -s <species_file>

Only process the species listed in the given file. Name of the species must be
as in the <phylo_tree> file. By default, all species are processed.

=for Euclid:
   species_file.type: string

=item -n <trait_name>

If the input file contains several traits, select the name of the trait to use
(case-insensitive), e.g. '16S rRNA Count' or 'Genome Size'. Make sure this
matches the name of the trait as found in the input file.

CAVEAT: Only traits expressed as integers are accepted at the moment!

Default: trait_name.default

=for Euclid:
   trait_name.type: string
   trait_name.default: '16S rRNA Count'

=item -a <avg_outliers>

Remove trait values inconsistent with the trait average for this IMG ID: 1=yes,
0=no. Default: avg_outliers.default

=for Euclid:
   avg_outliers.type: integer, avg_outliers == 0 || avg_outliers == 1
   avg_outliers.default: 1

=item -c <num_cpus>

Specify the number of processes to use. This computation is time consuming, so
you better use many processes. Default: num_cpus.default

=for Euclid:
   num_cpus.type: integer, num_cpus > 0
   num_cpus.default: 1

=back

=head1 AUTHOR

Florent Angly <florent.angly@gmail.com>

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012 Florent Angly

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use threads;
use Thread::Queue;
use Scalar::Util qw(looks_like_number);
use File::Spec::Functions qw(catfile tmpdir);
use File::Temp qw(tempfile);
use Statistics::Basic qw(mean);
use Getopt::Euclid qw(:minimal_keys);
use Data::Dump qw(dump);
use IPC::Run qw(run);
use Bio::Phylo::IO;
use POSIX qw(ceil floor);

use constant NONZERO => 1e-5;
use constant DEBUG   => 0;

my $gg_taxonomy;
estimate_species_trait( $ARGV{'i'}, $ARGV{'p'}, $ARGV{'t'}, $ARGV{'s'},
   $ARGV{'n'}, $ARGV{'a'}, $ARGV{'c'} );
exit;



sub estimate_species_trait {
   my ($input_files, $phylo_tree, $taxo_file, $species_file, $trait_name,
      $avg_outliers, $num_cpus) = @_;

   # Read experimental trait values
   my ($exp_file, @est_files) = @$input_files;
   my $tax2trait = read_metadata($exp_file, $trait_name);

   if ($avg_outliers) {
      $tax2trait = remove_outliers($tax2trait, $trait_name);
   }

   $tax2trait = estimate_trait($phylo_tree, $tax2trait, \@est_files,
      $species_file, $trait_name, $num_cpus);
   warn "Info: There are now trait values for ".(scalar keys %$tax2trait)." GG IDs\n";

   # Results at the OTU ID level
   print_results($tax2trait, $trait_name, 'ID');

   $tax2trait = map_tree_to_taxo($tax2trait, $taxo_file);

   $tax2trait = average_by_key($tax2trait);

   # Results at the OTU taxonomic string level
   print_results($tax2trait, $trait_name, 'tax_string');


   ####
   # Now calculate for every intermediary clade
   #print_results($tax2trait, $trait_name, 'clade');
   ####

   return 1;
}


sub map_tree_to_taxo {
   my ($tax2trait, $taxo_file) = @_;
   # Convert leaf ID from GG ID to GG taxo
   my $taxonomy = read_lookup($taxo_file);
   # Add empirical trait values first
   for my $id (keys %$tax2trait) {
      my $vals = $tax2trait->{$id};
      if (is_estimate($vals)) {
         # The trait value of this Greengenes ID is an estimate. Skip it
         next;
      } else {
         # Record empirical values only
         my $taxstr = $taxonomy->{$id};
         if (defined $taxstr) {
            push @{$tax2trait->{$taxstr}}, @$vals;
         } else {
            warn "Warning: GG ID $id had no GG taxonomic assignment. Skipping it...\n";
         }
         delete $tax2trait->{$id};
      }
   }
   # Add estimated trait values then, unless there already are empirical values
   for my $id (keys %$tax2trait) {
      next if $id =~ m/;/; # not an ID but a taxstring added by empirical value code
      my $vals = $tax2trait->{$id};
      my $taxstr = $taxonomy->{$id};
      if (defined $taxstr) {
         my $previous = $tax2trait->{$taxstr}->[-1];
         if ( (not defined $previous) || is_estimate([$previous]) ) {
            push @{$tax2trait->{$taxstr}}, @$vals;
         }
      } else {
         warn "Warning: GG ID $id had no GG taxonomic assignment. Skipping it...\n";
      }
      delete $tax2trait->{$id};
   }
   return $tax2trait;
}


sub is_estimate {
   # This arrayref of trait values contains a (decimal) estimate only?
   my ($vals) = @_;
   if (scalar @$vals == 1) {
      if ($vals->[0] =~ m/\./) {
         return 1;
      }
   }
   return 0;
}


sub estimate_trait {
   my ($tree_file, $tax2trait, $est_files, $species_file, $trait_name,
      $num_cpus) = @_;

   # Read pre-estimated trait values
   my $tax2trait_est = {};
   if (scalar @$est_files > 0) {
      $tax2trait_est = read_metadata($est_files, $trait_name);
   }

   # Estimate the trait value for leaves that do not have it
   my @ids_to_keep = keys %$tax2trait;

   my $clean_tree_file = (tempfile('tree_cleaned_XXXXXX', SUFFIX => '.nw', DIR => tmpdir))[1];
   clean_newick($tree_file, $clean_tree_file);
   warn "Info: Cleaned tree file into $clean_tree_file\n";

   my $leaf_names = read_leaf_names($clean_tree_file);
   warn "Info: Found ".(scalar @$leaf_names)." leaves in tree\n";

   # Ignore estimation for species not requested
   if (defined $species_file) {
      $leaf_names = { map {$_=> undef} @$leaf_names };
      my $species_list = read_lookup($species_file);
      for my $species (keys %$species_list) {
         if (not exists $leaf_names->{$species}) {
            warn "Warning: Requested species $species not found in tree. Skipping it...\n";
            delete $species_list->{$species};
         }
      }
      $leaf_names = [keys %$species_list];
      warn "Info: Using ".(scalar @$leaf_names)." species from $species_file only.\n";
   }

   #my $outfile = "tree_leaves_in_queue.txt"; ###
   #open my $out, '>', $outfile or die "Error: Could not write file $outfile\n"; ###
   my $q = Thread::Queue->new();
   for my $id (@$leaf_names) {
      if ( (not exists $tax2trait->{$id}) && (not exists $tax2trait_est->{$id}) ) {
         $q->enqueue($id);
         #print $out "$id\n"; ###
      }
   }
   warn "Info: There are ".$q->pending." leaves for which to estimate trait value.\n";
   $leaf_names = [];
   #close $out; ###
   
   # Copy hash and average trait values
   my $tax2avgtrait = { %$tax2trait };
   $tax2avgtrait = average_by_key($tax2avgtrait);

   # Create thread pool
   my @threads;
   for my $i (1 .. $num_cpus) {
      my $thr = threads->create(\&worker, $q, $clean_tree_file, \@ids_to_keep, $tax2avgtrait, $trait_name);
      if (not defined $thr) {
         die "Error: Could not create thread\n$!\n";
      }
      $q->enqueue(undef);
      push @threads, $thr;
   }

   # Wait for all threads to finish their work
   for my $thr (@threads) {
      my $trait_estimates = $thr->join();
      if (my $err = $thr->error) {
         die "$err\n";
      }
      # Add estimates to given trait values
      for my $id (keys %$trait_estimates) {
         push @{$tax2trait->{$id}}, delete $trait_estimates->{$id};
      }
   }

   # Add pre-existing estimates
   for my $id (keys %$tax2trait_est) {
      push @{$tax2trait->{$id}}, @{delete $tax2trait_est->{$id}};
   }   

   $tax2avgtrait = {};

   return $tax2trait;
}


sub worker {
   my ($id_q, $tree_file, $ids_to_keep, $tax2avgtrait, $trait_name) = @_;
   my %trait_estimates;
   my $tid = threads->tid();
   my $outfile = (tempfile("estimates_".$tid."_XXXXXX", SUFFIX => '.txt', UNLINK => 1))[1];
   open my $out, '>', $outfile or die "Error: Could not write file $outfile\n $!\n";
   print $out "GG ID\t$trait_name\n";
   while (my $id = $id_q->dequeue) {
      my $tree = grow_tree($tree_file, $ids_to_keep, $id, $tax2avgtrait);
      my $val = leaf_pic($id, $tree);
      print $out "$id\t$val\n";
      $trait_estimates{$id} = $val;
   }
   close $out;
   return \%trait_estimates;
}


sub read_leaf_names {
   my ($tree_file) = @_;
   # Read leaf names from Newick file, assuming that the tree has branch lengths
   open my $in, '<', $tree_file or die "Error: Could not read file $tree_file\n$!\n";
   my $nw_string;
   while (my $line = <$in>) {
      $nw_string .= $line;
   }
   close $in;
   chomp $nw_string;
   my @leaf_names = ($nw_string =~ m/[(,]([a-z0-9]+?):/gi);
   return \@leaf_names;
}


sub leaf_pic {
   my ($gg_id, $tree) = @_;
   # Use phylogenetic independent contrasts method to estimate and return the
   # trait value for the given leaf node. Tree should be pruned will be modified
   # IN-PLACE!
   #warn "Info: Applying phylogenetic independent contrasts to leaf $gg_id\n";
   while (1) {
      # Get and count cherries
      my $cherries = get_cherries($tree);
      last if not scalar keys %$cherries;
      # Process and remove cherries
      for my $nodes (values %$cherries) {
         my ($parent, @children) = @$nodes;
         $parent = process_by_pic($parent, \@children);
      }
   }

   # Check that only a single leaf remains
   my @leaves = @{$tree->get_terminals};
   my $nof_leaves  = scalar @leaves;
   if (not ($nof_leaves == 1)) {
      die "Error: Internal problem. There should be only one leaf left and no ".
          "internal nodes but there are still $nof_leaves leaves.\n";
   }

   my $val = $leaves[0]->get_generic('trait');
   ###warn "Info: Estimated trait value for leaf $gg_id: $val\n";
   return $val;
}


sub remove_outliers {
   my ($tax2trait, $trait_name) = @_;
   my $num_inconsistent = 0;
   my $num_fixed = 0;
   for my $id (keys %$tax2trait) {
      my $vals = $tax2trait->{$id};
      if (scalar @$vals > 1) {
         my $mean = mean($vals)->query;
         my $inconsistent = 0;
         my $fixed = 0;
         my $msg = "Warn: Outlier detected: $id => [".join(', ',@$vals)."].";
         for (my $i = 0; $i <= scalar @$vals - 1; $i++) {
            my $val = $vals->[$i];
            my $near_avg = ($trait_name =~ m/16S/i) ?
                           near_avg_ssu($val, $mean) :
                           near_avg($val, $mean, $mean/10);
            if (not $near_avg) {
               $inconsistent = 1;
               $num_inconsistent++;
               next if ($trait_name =~ m/16S/i) && ($val > 1); # 1s are a frequent 16S error
               splice @$vals, $i, 1;
               $i--;
               $fixed = 1;
               $num_fixed++;
            }
         }
         if ($fixed) {
            $msg .= " Corrected to [".join(', ',@$vals)."].";
            $tax2trait->{$id} = $vals;
            if (scalar @{$tax2trait->{$id}} == 0) {
               delete $tax2trait->{$id};
            }
         } else {
            $msg .= " Uncorrected.";
         }
         if ($inconsistent) {
            warn "$msg\n";
         }
      }
   }
   warn "Warn: Found $num_inconsistent inconsistent trait values and corrected $num_fixed of those.\n";
   return $tax2trait;
}


sub print_results {
   my ($tax2trait, $trait_name, $name) = @_;
   # Print results, sorted by taxonomic level and alphabetically or within each
   # level. It is sorted numerically when dealing with numbers.
   # Determine if we can sort numerically
   my $numeric = 1;
   while ( (my $tax, undef) = each %$tax2trait ) {
      if (not looks_like_number($tax)) {
         $numeric = 0;
         last;
      }
   }

   # Sort results by taxonomic level
   my @taxs = keys %$tax2trait;
   if ($numeric) {
      @taxs = sort {$a <=> $b} @taxs;
   } else {
      @taxs = sort {$a cmp $b} @taxs;
   }

   # Print results
   print "# $name\t$trait_name\n";
   for my $tax ( @taxs ) {
      my $val = sprintf('%.5f', $tax2trait->{$tax});
      print "$tax\t$val\n";
   }
   print "\n";
   return 1;
}


sub process_by_pic {
   my ($parent, $children) = @_;
   # Calculate trait value for parent $pval as a weighted average of the
   # children's trait value @cvals where the weights $weis are proportional
   # to the inverse of the branch distance @dists between parent and
   # children. Hence, the trait value of a child closer to the parent
   # contributes more than the trait value of a childr that is farther away.

   my @cvals  = map { $_->get_generic('trait')           } @$children;
   my @cdists = map { 0+$_->get_branch_length || NONZERO } @$children;

   # Calculate trait value for parent
   my @weis = map { 1 / $_ } @cdists;
   my $pval = ($cvals[0]*$weis[0] + $cvals[1]*$weis[1]) / ($weis[0]+$weis[1]);
   $parent->set_generic('trait' => $pval);

   # Stretch parent's branch
   my $pdist = $parent->get_branch_length;
   if ( ($cdists[0] > 0) && ($cdists[1] > 0) ) {
      $pdist += $cdists[0]*$cdists[1] / ($cdists[0]+$cdists[1]);
   }
   $parent->set_branch_length($pdist);

   print_nodes($parent, @$children) if DEBUG;

   # Delete children
   for my $child (@$children) {
      $parent->prune_child($child);
   }

   return $parent;
}


sub get_cherries {
   my ($tree) = @_;
   # Find cherries in the tree and report them in a hash, keyed by the parent ID
   my %cherries;
   for my $tip ( @{ $tree->get_terminals } ) {
      if ( my $parent = $tip->get_parent ) {
         my $pid = $parent->get_id;
         if (exists $cherries{$pid}) {
            next;
         }
         if ( $parent->is_preterminal ) {
            my $children = $parent->get_children;
            if ( scalar @{$children} == 2 ) {
               $cherries{$pid} = [$parent, @$children];
            }
         }
      }
   }
   return \%cherries;
}


sub print_nodes {
   my ($parent, $child1, $child2) = @_;
   # Print node info for parent and optional two children
   my $msg;
   if (defined $child1) {
      $msg .= "CHILD1: '".(get_short_name($child1)||'?')."' (uid ".$child1->get_id.") = ".($child1->get_generic('trait')||"")."\n";
   }
   if (defined $child2) {
      $msg .= "CHILD2: '".(get_short_name($child2)||'?')."' (uid ".$child2->get_id.") = ".($child2->get_generic('trait')||"")."\n";
   }
   $msg .= "PARENT: '".(get_short_name($parent)||'?')."' (uid ".$parent->get_id.") = ".($parent->get_generic('trait')||"")."\n";
   warn "$msg\n";
   return 1;
}


sub grow_tree {
   my ($tree_file, $kept_ids, $root_id, $tax2avgtrait) = @_;
   # Prune, reroot and attach traits to tree
   my $tid = threads->tid();
   my $pruned_file = (tempfile("tree_pruned_".$tid."_XXXXXX", SUFFIX => '.nw', DIR => tmpdir))[1];
   nw_prune($tree_file, $root_id, $kept_ids, $pruned_file);
   my $rerooted_file = (tempfile("tree_rerooted_".$tid."_XXXXXX", SUFFIX => '.nw', DIR => tmpdir))[1];
   nw_reroot($pruned_file, $root_id, $rerooted_file);
   my $tree = Bio::Phylo::IO->parse(
      -file   => $rerooted_file,
      -format => 'newick',
   )->first;
   $tree = attach_trait_to_leaves ($tree, $tax2avgtrait);
   return $tree;
}


sub nw_prune {
   my ($nw_file, $root_id, $labels_to_keep, $outfile) = @_;
   # Use nw_prune to prune tree in given Newick file
   my $prog = 'nw_prune';
   my $cmd  = [$prog, '-v', $nw_file, $root_id, @$labels_to_keep];
   run $cmd, '>', $outfile or die "Error: $prog failed with status $?\n";
   #warn "Info: ".scalar(@{read_leaf_names($outfile)})." leaves remaining on tree after pruning\n"; ####
   return 1;
}


sub nw_reroot {
   my ($nw_file, $root_label, $outfile) = @_;
   # Run nw_reroot to reroot tree in given Newick file
   my $prog = 'nw_reroot';
   my $cmd  = [$prog, '-l', $nw_file, $root_label];
   run $cmd, '>', $outfile or die "Error: $prog failed with status $?\n";
   # Make $root_label the root, not an outgroup, i.e. go from:
   #    (X:0.075,(C:0.140000,(A:0.110000,B:0.120000)Int1:0.29)Int2:0.075) ;
   # to:
   #    (        (C:0.140000,(A:0.110000,B:0.120000)Int1:0.29)Int2:0.150)X;
   my $nw_string;
   open my $in, '<', $outfile or die "Error: Could not read file $outfile\n$!\n";
   while (my $line = <$in>) {
      $nw_string .= $line;
   }
   close $in;
   chomp $nw_string;
   $nw_string =~ s/ ^\($root_label:(\S+?),(.*):(\S+?)\);$ / "($2:".($1+$3).")$root_label;" /ex;
   write_tree($nw_string, $outfile);
   return 1;
}


sub clean_newick {
   my ($infile, $outfile) = @_;
   # Sanitize some characters and workaround tree re-rooting issue
   my $nw_string;
   open my $in, '<', $infile or die "Error: Could not read file $infile\n$!\n";
   while (my $line = <$in>) {
      # Replace semicolons and whitespaces in node names
      $line =~ s/'(.*?)'/replace_chars("'$1'")/ge;
      $line =~ s/\)\d+/)/g;
      $nw_string .= $line;
   }
   close $in;
   chomp $nw_string;
   write_tree($nw_string, $outfile);
   return 1;
}


sub replace_chars {
   my ($string) = @_;
   # Replace any semicolon in the given string by '.,' and any space by '\s'
   $string =~ s/;/.,/g;
   $string =~ s/ /\\s/g;
   return $string;
}


sub restore_chars {
   my ($string) = @_;
   # Restore any '.,' to semicolon and any '\s' to space
   $string =~ s/.,/;/g;
   $string =~ s/\\s/ /g;
   return $string;
}


sub get_short_name {
   my ($node) = @_;
   return clean_name($node->get_name);
}


sub clean_name {
   my ($name) = @_;
   $name = restore_chars($name);
   $name =~ s/^'(.*)'$/$1/;
   $name =~ s/^"(.*)"$/$1/;
   return $name;
}


sub read_metadata {
   my ($files, $trait_name) = @_;
   if (not (ref $files eq 'ARRAY')) {
      $files = [$files];
   }
   my %tax2trait;
   my $num = 0;
   for my $file (@$files) {
      open my $fh, '<', $file or die "Error: Could not read file $file\n$!\n";
      my $header = <$fh>;
      chomp $header;
      my @cols = find_column_for($header, 'GG ID', $trait_name);
      warn "Info: Found trait '$trait_name' in column ".($cols[-1]+1)." of input ".
        "file $file\n";
      # Parse input file
      while (my $line = <$fh>) {
         chomp $line;
         next if $line =~ m/^#/;
         my ($gg_id, $trait_val) = (split /\t/, $line)[@cols];
         if ( (not defined $gg_id) || ($gg_id eq '-') ) {
            next;
         }
         if ( (not defined $trait_val) || ($trait_val eq '-') ) {
            next;
         }
         push @{$tax2trait{$gg_id}}, $trait_val;
         $num++;
      }
      close $fh;
   }
   warn "Info: Read $num trait values for ".(scalar keys %tax2trait)." distinct".
      " GG IDs from ".(scalar @$files)." files\n";
   return \%tax2trait;
}


sub attach_trait_to_leaves {
   my ($tree, $trait_avgs) = @_;
   # Attach trait values to leaves of the tree
   for my $leaf (@{$tree->get_terminals}) {
      $leaf->set_generic( 'trait' => $trait_avgs->{$leaf->get_name} );
   }
   return $tree;
}


sub average_by_key {
   my ($hash, $weight_hash) = @_;
   # Given a hash of arrays, make the average of the arrays by key. Note that
   # the modifications are done IN PLACE on both the hash of values and of
   # weights
   for my $key (keys %$hash) {
      my $vals = $hash->{$key};
      if (ref($vals) eq 'ARRAY') {
         my $mean = 0;
         if (defined $weight_hash) {
            # Weighted mean
            my $total = 0;
            my $weights = $weight_hash->{$key};
            for my $weight (@$weights) {
               $total += $weight;
            }
            $weight_hash->{$key} = $total;
            for my $i (0 .. scalar @$vals - 1) {
               my $val = $vals->[$i];
               my $weight = $weights->[$i];
               $mean += $val * $weight;
            }
            $mean /= $total;
         } else {
            # Simple mean
            $mean = mean($vals)->query;
         }
         # Number of decimal digits to use
         #if ( (scalar @$vals > 1) && (defined $digits) ) {
         #   $mean = sprintf( "%.".$digits."f" , $mean );
         #}
         $hash->{$key} = $mean;
      } # else do nothing, keep the single value
   }
   if (defined $weight_hash) {
      return $hash, $weight_hash;
   } else {
      return $hash;
   }
}


sub read_lookup {
   my ($file) = @_;
   # Read a 2-column, tab-delimited lookup file (e.g. Greengenes taxonomy,
   # img_to_gg, etc)
   my $lookup;
   open my $fh, '<', $file or die "Error: Could not read file $file\n$!\n";
   while (my $line = <$fh>) {
      chomp $line;
      next if $line =~ m/^#/;
      next if $line =~ m/^\s*$/;
      my ($key, $val) = split /\t/, $line;
      $lookup->{$key} = $val;
   }
   close $fh;
   return $lookup;
}


sub ssu_thr {
   my ($mean_copy) = @_;
   # Using rrNDB, it looks like there is a linear relation between the max
   # difference D between a copy number for a genome and the average copy number
   # X of the species that this genome is from: D = 0.10377 X + 0.72642
   my $thr = 0.10377 * $mean_copy + 0.72642;
   return $thr;
}


sub near_avg {
   my ($val, $mean, $stddev) = @_;
   # Given a mean and standard deviation, see if the provided value is near the
   # mean, i.e. if it is less than 3 standard deviations away from it
   return (abs($mean-$val) > 3*$stddev) ? 0 : 1;
}


sub near_avg_ssu {
   my ($copy_num, $mean_copy, $mult) = @_;
   # Check that the difference between the given copy number (an integer) and
   # species average is under the maximum allowed threshold (w 20% error margin)
   if (not defined $mult) {
      $mult = 1;
   }
   my $thr   = 1.2 * $mult * ssu_thr($mean_copy);
   my $max   = ceil(  $mean_copy + $thr );
   my $min   = floor( $mean_copy - $thr );
   if ($min < 1) {
      $min = 1;
   }
   my $is_near;
   if ( ($copy_num >= $min) && ($copy_num <= $max) ) {
      $is_near = 1;
   } else {
      $is_near = 0;
   }
   return $is_near;
}


sub find_column_for {
   my ($header_line, @field_names) = @_;
   # Given a tab-separated header line, find which column matches the given name.
   # Search is insensitive to case, spaces, underscores and dashes. Also, note
   # that matches only need to be partial.
   my @fields = split /\t/, $header_line;
   # Make names and cols insensitive
   for my $arr ( \@fields, \@field_names ) {
      for my $i (0 .. scalar @$arr - 1) {
         $arr->[$i] =~ s/[\s_-]//g;
         $arr->[$i] = lc $arr->[$i];
      }
   }
   # Look for names in column headers
   my @col_nums;
   for my $name (@field_names) {
      my $col_num;
      for ($col_num = 0; $col_num < scalar @fields; $col_num++) {
         my $field = $fields[$col_num];
         if ($field =~ m/$name/) {
            push @col_nums, $col_num;
            last;
         }
      }
      if (not defined $col_num) {
         die "Error: Could not find column holding '$name' data\n";
      }
   }
   return @col_nums;
}


sub write_tree {
   my ($tree, $file) = @_;
   # Write a tree object or string in a Newick file
   open my $out, '>', $file or die "Error: Could not write file $file\n$!\n";
   my $str;
   if (ref $tree eq 'Bio::Phylo::Forest::Tree') {
      $str = Bio::Phylo::IO->unparse(
         -phylo      => $tree,
         -format     => 'newick',
         -nodelabels => 1, # report name of internal nodes
      );
   } else {
      $str = $tree;
   }
   print $out $str;
   close $out;
   return 1;
}
