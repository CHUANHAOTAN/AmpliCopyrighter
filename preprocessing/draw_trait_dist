#!/usr/bin/env perl

# draw_trait_dist
# Copyright 2012 Florent Angly
# You may distribute this module under the terms of the GPLv3


=head1 NAME

draw_trait_dist - Plot trait distribution across a taxonomy

=head1 SYNOPSIS

  draw_trait_dist -i trait_by_taxo.txt > graph.svg

=head1 DESCRIPTION

This script takes the value of a trait across a phylogeny and plots it.

=head1 REQUIRED ARGUMENTS

=over

=item -i <input_file>

Input file of the distribution of the trait in a taxonomy. This file should be
tab-delimited and have at least two columns: full taxonomic lineage and trait
value. The taxonomic lineage should be tab-separated, e.g.
'k__Bacteria; p__Acidobacteria; [...]'. An optional third column can be provided
and should be the number of species in this lineage. Extra columns are ignored.

=for Euclid:
   input_file.type: readable

=head1 OPTIONAL ARGUMENTS

=over

=item -l <max_level>

Only draw the trait for the first <max_level> levels of the taxonomy. The
default is to draw all levels. Default: max_level.default

=for Euclid:
   max_level.type: integer, max_level > 0
   max_level.default: 4

=item -w <max_width>

Maximum width for the graph. Increase this value if the graph looks too cramped.
Default: max_width.default

=for Euclid:
   max_width.type: integer, max_width > 0
   max_width.default: 1500

=item -c <min_trait> <max_trait> <num_classes>

Use the given trait classes. By default, the minimum and maximum in the data
are detected and used as the basis to form num_classes.default classes.

=for Euclid:
   min_trait.type  : number
   max_trait.type  : number
   num_classes.type: integer, num_classes > 0
   min_trait.default: ''
   max_trait.default: ''
   num_classes.default: 10

=back

=head1 AUTHOR

Florent Angly <florent.angly@gmail.com>

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012, 2013 Florent Angly

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use Method::Signatures;
use Getopt::Euclid qw(:minimal_keys);
use IPC::Run qw(run);
use SVG;
use SVG::Parser;
use Math::Gradient qw(multi_array_gradient);
use List::Util qw(max min);
use Bio::Phylo::Factory;
use Bio::Phylo::Forest::Tree;
use Bio::Community::TaxonomyUtils;
use FindBin qw($Bin);
use lib "$Bin";
use PreprocUtils;

use constant DEBUG => 0;

draw_trait_dist(
   $ARGV{'i'}, $ARGV{'l'}, $ARGV{'w'},
   $ARGV{'c'}{'min_trait'}, $ARGV{'c'}{'max_trait'}, $ARGV{'c'}{'num_classes'}
);
exit;


func draw_trait_dist ($input_file, $max_level, $max_width, $min_trait, $max_trait, $num_classes) {
   # Parse input file
   my ($tax2trait, $tax2num, $trait_name, $num_levels) = parse_file($input_file);
   # Make a tree from taxonomy and attach trait value
   my $tree = taxo2tree($tax2trait, $tax2num, $trait_name, $num_levels, $max_level);
   # Now draw the tree and the trait values
   draw_tree($tree, $max_width, $trait_name, $min_trait, $max_trait, $num_classes);
   return 1;
}


func draw_tree (Bio::Phylo::Forest::Tree $tree, $max_width, $trait_name,
   $want_min, $want_max, $want_classes) {

   # Draw the tree with its associated trait

   ### Ideally, max_width should be estimated from the number of leaves, and
   ### the node font size should be increased appropriately, as well as the
   ### minimum and maximum circle radius.

   # First convert and save the tree as Newick
   my $out_newick = 'taxo_tree.nw';
   warn "Info: Saving tree in Newick file $out_newick\n";
   PreprocUtils::write_tree($tree, $out_newick);
   # Then generate a CSS and ornament file with the colors and decorations to use
   my $out_css = 'taxo_tree.css';
   write_css_file($tree, $out_css);
   my $out_orn = 'taxo_tree.orn';
   my ($min_trait, $max_trait) = write_ornament_file($tree, $out_orn,
      $trait_name, $want_min, $want_max, $want_classes);
   # Run nw_display to draw tree in SVG
   my $out_svg = 'taxo_tree.svg';
   warn "Info: Drawing tree in SVG file $out_svg\n";
   my @cmd = ('nw_display', '-h');
   my ($in, $out, $err);
   run \@cmd, \$in, \$out, $err or die "Error: Could not run nw_display\n$!\n";
   my $leaf_style  = 'font-size:medium;font-family:sans'; # default: small
   my $inner_style = 'font-size:medium;font-family:sans'; # default: medium
   @cmd = (
      'nw_display',
      '-s',               # SVG format
      '-r',               # radial tree
      '-I', 'l',          # inner label position: near 'l'eaves [d], 'm'iddle or 'r'oot
      '-n', 8,            # pixels to add to position of leaf node labels
      '-w', $max_width,   # graph max width in pixels
      '-l', $leaf_style,  # style for leaf nodes
      '-i', $inner_style, # style for inner nodes
      '-c', $out_css,     # input CSS file
      '-o', $out_orn,     # input ornament file
      $out_newick,        # input Newick tree file
   );
   run \@cmd, '>', $out_svg or die "Error: Could not run nw_display\n$!\n";
   finish_svg($out_svg, $min_trait, $max_trait, $want_classes); # add a legend and do some cleanup
   cat($out_svg);
   #unlink $out_newick, $out_css, $out_orn, $out_svg;
   unlink $out_css, $out_orn, $out_svg;
   return 1;
}


func cat ($file) {
   # cat content of file on stdout
   open my $in, '<', $file or die "Error: Could not read file $file\n$!\n";
   while (my $line = <$in>) {
      print $line;
   }
   close $in;
   return 1;
}


func finish_svg ($svg_file, $min_trait, $max_trait, $want_classes) {
   # Remove some text elements, massage some others
   my %args = (
      #-debug      => DEBUG,
      #-raiseerror => 0,
   );
   my $svg = SVG::Parser->new(%args)->parse_file($svg_file);
   for my $tag ($svg->getElements('text')) {
      my $value = $tag->getCDATA();
      $value =~ s/^\s+|\s+$//g; # remove leading and trailing whitespaces
      if ($value =~ m/^transparent/) {
         # Remove text elements called 'transparentX'
         $tag->cdata('');
         next;
      }
      if ($value =~ m/^(.*)\(.\)$/) {
         # Fix text elements such as Chloroflexi(c) to Chloroflexi
         $tag->cdata($1);
         next;
      }
   }
   add_legend($svg, $min_trait, $max_trait, $want_classes);
   open my $out, '>', $svg_file or die "Error: Could not write file $svg_file\n$!\n";
   print $out $svg->xmlify;
   close $out;
   return 1;
}


func write_css_file ($tree, $file) {
   # Generate a CSS file (transparent clades, line width) for nw_display

   # Calculate min and max number of genomes
   my (@names, @nums);
   for my $node (@{$tree->get_entities}) {
      my $num = $node->get_generic('num') || 1; # this is to include transparent nodes
      my $name = $node->get_name;
      push @names, $name;
      push @nums , $num ;
   }
   my $min = min @nums;
   my $max = max @nums;
   warn "Info: Minimum number of species in clade is $min\n";
   warn "Info: Maximum number of species in clade is $max\n";

   my %styles;
   for my $i (0 .. scalar @names - 1) {
      my $name = esc_nw_chars( $names[$i] );
      my $num  = $nums[$i];
      if ( $name =~ m/^transparent/ ) {
         # Make 'transparentX' nodes transparent
         my $style = 'opacity:0';
         push @{$styles{$style}}, $name;
      } else {
         # Scale branch proportionally to number of genomes
         my $style = calc_style($num, $max, $min);
         push @{$styles{$style}}, $name;
      }
   }
   open my $out, '>', $file or die "Error: Could not write file $file\n$!\n";
   while (my ($style, $clades) = each %styles) {
      print $out "$style Individual ".join(' ',@$clades)."\n";
   }
   close $out;

   return 1;
}


func calc_style ($num, $num_max, $num_min) {
   my $width;
   my $width_min = 1;
   my $width_max = 5;
   my $style = 'stroke:black;fill:none;stroke-linecap:round;stroke-width:';
   if ($num_max == 1) {
      # All traits estimated from the same number of genomes. Give them all a
      # continuous line of width 1
      $width = 1;
   } else {
      # Give a broken line for clades with a single genome
      # Give a continuous line of width linearly related to the log of the
      # number of genomes in the clade
      if ($num == 1) {
         $width = $width_min;
         $style .= $width;
         $style .= ';stroke-linejoin:miter';
         $style .= ';stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:2,2;stroke-dashoffset:0';
      } else {
         $num     = log($num);
         $num_max = log($num_max);
         $num_min = log($num_min);
         $width = 1 / ($num_max-$num_min) * ( $width_min*($num_max-$num_min) -
            $num_min*($width_max-$width_min) + $num*($width_max-$width_min) );
         $width = sprintf('%.02f', $width);
         $style .= $width;
      }
   }
   return $style;
}


func write_ornament_file ($tree, $file, $trait_name, $want_min, $want_max, $want_classes) {
   # Generate a file of ornaments (colored circles) for nw_display

   # Calculate min and max trait value
   my (@names, @vals);
   for my $node (@{$tree->get_entities}) {
      my $val  = $node->get_generic($trait_name);
      next if not defined $val;
      my $name = $node->get_name;
      push @names, $name;
      push @vals , $val ;
   }
   my $min = $want_min eq '' ? min @vals : $want_min;
   my $max = $want_max eq '' ? max @vals : $want_max;

   warn "Info: Minimum trait value is $min\n";
   warn "Info: Maximum trait value is $max\n";

   # Attribute style (circle radius and fill color) to clades
   my $colors = get_col_palette($want_classes);
   my %styles;
   for my $i (0 .. scalar @names - 1) {
      my $name = esc_nw_chars( $names[$i] );
      # Make circle of area linearly related to trait value
      my $val = $vals[$i];
      next if not defined $val;
      my $radius = calc_radius($val, $max, $min);
      my $fill_col = pick_col($val, $max, $min, $colors);
      my $style = svg_circle($radius, $fill_col, 'none');
      warn "name $name, val $val, radius $radius, color $fill_col\n" if DEBUG;
      push @{$styles{$style}}, $name;
   }

   # Write ornament file
   open my $out, '>', $file or die "Error: Could not write file $file\n$!\n";
   while (my ($style, $clades) = each %styles) {
      print $out "$style Individual ".join(' ',@$clades)."\n";
   }
   close $out;

   return $min, $max;
}


func get_col_palette ($num_colors) {
   # Return the color palette to use
   my $blue   = [  0,   0, 255]; #0000FF
   my $blue2  = [  0, 127, 255]; #007FFF
   my $cyan   = [  0, 255, 255]; #00FFFF
   my $cyan2  = [127, 255, 127]; #7FFF7F
   my $green  = [  0, 255,   0]; #00FF00
   my $green2 = [127, 255,   0]; #00FF00
   my $yellow = [255, 255,   0]; #FFFF00
   my $orange = [255, 127,   0]; #FF7F00
   my $red    = [255,   0,   0]; #FF0000
   my $red2   = [127,   0,   0]; #7F0000
   #my @colors = multi_array_gradient(10, $blue, $green, $red);
   my @colors = multi_array_gradient($num_colors, $blue, $blue2, $cyan, $cyan2, $yellow,
      $orange, $red, $red2);
   #my @colors = ($blue, $blue2, $cyan, $cyan2, $green, $green2, $yellow, $orange, $red, $red2);
   #my @colors = multi_array_gradient($num_colors, $blue, $blue2, $cyan, $cyan2, $yellow,
   #   $orange, $red, $red2); # Jet color palette (10 colors)
   #my @colors = multi_array_gradient($num_colors, $blue, $green, $red);
   return \@colors;
}


func add_legend ($svg, $min_trait, $max_trait, $num_classes) {
   my $colors = get_col_palette($num_classes);
   my $num_cols = scalar @$colors;
   my $interval = ($max_trait - $min_trait) / $num_cols;
   my @boundaries = ($min_trait);
   for my $i (0 .. $num_cols-1) {
      push @boundaries, $boundaries[$i] + $interval;
   }
   my @vals;
   for my $i (0 .. $num_cols-1) {
      my $low   = $boundaries[$i];
      my $high  = $boundaries[$i+1];
      push @vals, [$low, $high];
   }
   my $x = 20;
   my $y = 20;
   my $spacing = 5;
   for my $i (0 .. $num_cols-1) {
      my ($low, $high) = @{$vals[$i]};
      my $mean = ($high + $low) / 2;
      $low  = sprintf( '%.1f', $low );
      $high = sprintf( '%.1f', $high);
      my $label = "$low - $high";
      my $radius = calc_radius($mean, $max_trait, $min_trait);
      my $fill_col = $colors->[$i];
      if (ref($fill_col) eq 'ARRAY') {
         # Transform rgb array into a RGB string
         $fill_col = 'rgb('.join(',',@$fill_col).')';
      }
      $svg->circle(cx => $x, cy => $y, r => $radius, fill => $fill_col, stroke => 'none');
      $svg->text('x' => $x + 20, 'y' => $y, -cdata => $label);
      $y += $spacing + 40;
   }
   return $svg;
}


func pick_col ($val, $max, $min, $colors) {
   # Map a trait value onto the given color scale. Colors in the scale can
   # be hexadecimal, e.g. #00FF00, or rgb (as an arrayref), e.g. [0, 255, 0].
   my $num_cols = scalar @$colors;
   my $interval = ($max - $min) / $num_cols;
   my @boundaries = ($min);
   for my $i (0 .. $num_cols-1) {
      push @boundaries, $boundaries[$i] + $interval;
   }
   my $pos;
   for my $i (0 .. $num_cols-1) {
      if ($val < $boundaries[$i+1]) {
         $pos = $i;
         last;
      }
   }
   if (not defined $pos) {
      $pos = $num_cols-1;
   }
   my $color = $colors->[$pos];
   if (ref($color) eq 'ARRAY') {
      # Transform rgb array into a RGB string
      $color = 'rgb('.join(',',@$color).')';
   }
   return $color;
}


func esc_nw_chars ($str) {
   # Escape some characters:
   #    * replace ' ' by _
   #    * quote strings that contain -
   #    * quote strings that contain ( )
   $str =~ s/ /_/g;
   if ($str =~ m/[-()]/) {
      $str = "'".$str."'";
   }
   return $str;
}


func calc_radius ($trait_val, $trait_max, $trait_min) {
   # Trait value linearly related to disk area
   my $rad_min = 5;
   my $rad_max = 20;
   my $rad = sqrt( $rad_min**2 + ($rad_max**2 - $rad_min**2) *
      ($trait_val - $trait_min) / ($trait_max - $trait_min) );
   #### TODO: radius still not quite proportional!
   return $rad;
}


func svg_circle ($radius?, $fill_col?, $stroke_col?) {
   # Return a SVG circle, e.g. "<circle style=’fill:red;stroke:black’ r=’5’/>"
   my $str = '"<circle ';
   if ( (defined $fill_col) or (defined $stroke_col) ) {
      $str .= "style='";
      if (defined $fill_col) {
         $str .= "fill:$fill_col;";
      }
      if (defined $stroke_col) {
         $str .= "stroke:$stroke_col;";
      }
      $str .= "'";
   }
   if (defined $radius) {
      $str .= " r='".$radius."'";
   }
   $str .= '/>"';
   return $str;
}


func parse_file ($file) {
   # Parse input file and record taxonomy, trait value, number of species,
   # trait name and number of taxonomic levels
   my %tax2trait;
   my %tax2num;
   # Read trait name
   open my $in, '<', $file or die "Error: Could not read file $file\n$!\n";
   my $header = <$in>;
   my $trait_name = (split /\t/, $header)[1];
   # Read taxo and trait values
   my $num_levels = 0;
   while (my $line = <$in>) {
      my ($tax, $trait, $num_spp, @extra) = split /\t/, $line;
      $tax2trait{$tax} = $trait;
      $tax2num{$tax} = $num_spp || 1;
      my $lineage_arr = Bio::Community::TaxonomyUtils::split_lineage_string($tax);
      my $nof_elems = scalar @$lineage_arr;
      if ($nof_elems > $num_levels) {
         $num_levels = $nof_elems;
      }
   }
   close $in;
   warn "Info: Read ".(scalar keys %tax2trait)." taxonomic strings and trait values\n";
   warn "Info: Detected $num_levels levels in this taxonomy\n";
   return \%tax2trait, \%tax2num, $trait_name, $num_levels;
}


func taxo2tree ( $tax2trait, $tax2num, $trait_name, $num_levels, $max_level? ) {
   # Transform taxonomy to a tree and attach trait value
   if (not defined $max_level) {
      # Use all taxonomic levels unless a maximum number was specified
      $max_level = $num_levels;
   }
   my $fac  = Bio::Phylo::Factory->new;
   my $tree = $fac->create_tree;
   my $root = $fac->create_node;
   $root->set_name('LUCA');
   $tree->insert($root);
   my %seen;
   for my $taxo (keys %$tax2trait) {
      warn "\nlineage: $taxo\n" if DEBUG;
      # Split lineage into its elements
      my $lineage_arr = Bio::Community::TaxonomyUtils::split_lineage_string($taxo);
      my $ancestor_name = 'LUCA';
      for my $i (0 .. scalar @$lineage_arr - 1) {
         # Respect specified max level
         if ( $i >= $max_level ) {
            last;
         }
         my $name = $lineage_arr->[$i];
         if (not exists $seen{$name}) {
            # Create and add the node unless it has already been seen
            $seen{$name} = undef;
            my $node = $fac->create_node;
            $node->set_name($name);
            my $ancestor = $tree->get_by_name($ancestor_name);
            $ancestor->set_child($node);
            warn "node $name, parent $ancestor_name\n" if DEBUG;
            $tree->insert($node);
         }
         if ($i == scalar @$lineage_arr - 1) {
            # Add trait value of taxon
            my $trait_val = $tax2trait->{$taxo};
            next if not defined $trait_val;
            my $num_spp = $tax2num->{$taxo};
            my $node = $tree->get_by_name($name);
            $node->set_generic($trait_name => $trait_val);
            $node->set_generic('num' => $num_spp);
            warn "node $name, trait $trait_val\n" if DEBUG;
         }
         $ancestor_name = $name;
      }
      delete $tax2trait->{$taxo};
   }
   my $root_num = $tax2num->{'k__Archaea'} + $tax2num->{'k__Bacteria'}; 
   $root->set_generic('num' => $root_num);
   %seen = ();

   # Add fake transparent nodes until each leaf has the expected number of levels
   my $num_fake = 1;
   for my $leaf (@{$tree->get_terminals}) {
      my $num_levels = $leaf->calc_nodes_to_root - 1;
      if ($num_levels < $max_level) {
         #warn "Warn: Leaf ".$leaf->get_name." had only $num_levels levels\n";
         my $ancestor_name = $leaf->get_name;
         for (1 .. $max_level - $num_levels) {
            my $name = 'transparent'.$num_fake;
            $num_fake++;
            my $node = $fac->create_node;
            $node->set_name($name);
            my $ancestor = $tree->get_by_name($ancestor_name);
            $ancestor->set_child($node);
            warn "node $name, parent $ancestor_name\n" if DEBUG;
            $tree->insert($node);
            $ancestor_name = $name;
         }
      }
   }

   # Clean names
   for my $node (@{$tree->get_entities}) {
      my $name = $node->get_name;
      # Remove Greengenes headers, e.g. transform k__Archaea to Archaea
      $name =~ s/^(.)__//;
      my $group = $1;
      # Remove brackets, e.g. transform [Brachyspirae] to Brachyspirae
      $name =~ s/^\[(.*)\]$/$1/;
      # Abbreviate bacteria and archaea to b. and a. to save space
      $name =~ s/bacteria$/b./;
      $name =~ s/(?:archaeota|archaea)$/a./;
      # Disambiguate duplicate names, e.g. the first occurence of Chloroflexi
      # (p__Chloroflexi) becomes Chloroflexi and the second (c__Chloroflexi)
      # becomes Chloroflexi(c)
      if (exists $seen{$name}) {
         $name = $name.'('.$group.')';
      }
      $node->set_name($name);
      $seen{$name} = undef;
   }
   return $tree;
}
