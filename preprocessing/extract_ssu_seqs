#! /usr/bin/env perl

# extract_ssu_seqs
# Copyright 2012 Florent Angly and Adam Skarshewski
# You may distribute this module under the terms of the GPLv3


=head1 NAME

extract_ssu_seqs - Identify 16S/18S rRNA genes in IMG genomes and extract their sequence

=head1 SYNOPSIS

  extract_ssu_seqs -i <folder_of_IMG_genomes>...

=head1 DESCRIPTION

Use IMG annotations, or RNAmmer and rfam_scan (>=1.1) searches to identify
16S/18S rRNA gene sequences in genomes, and extract their sequence. The input is
folders containing IMG genome folders (with GFF and gene FASTA files). All
identified 16S/18S sequences are printed as FASTA-formatted stream on stdout and
are given IDs of the form: >$imgid_$genenum

=head1 REQUIRED ARGUMENTS

=over

=item -d <dir>...

Input directories, containing folders of IMG genomes.

=for Euclid:
   dir.type: readable

=item -i <img_file>

Input IMG metadata file to determine the kingdom to which each genome belongs.
The IMG metadata file can be obtained using the export function of IMG
(http://img.jgi.doe.gov/). The number and order of the columns is not important,
but this script expects to find at least two columns, named 'taxon_oid' and
'Domain'.

=for Euclid:
   img_file.type: readable

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -m <method>

Method to use for the identification of 16S/18S genes: 'img' to trust the IMG
annotations, 'rnammer' to identify SSU genes using RNAmmer, or 'rfam_scan' to
identify them using a more sensitive RFAM search. Default: method.default

=for Euclid:
  method.type: /(img|rnammer|rfam_scan|infernal)/
  method.default: 'img'

=item -c <rfam_cm>

Path to the Rfam database covariance model file. If you use 'rfam_scan' or
'infernal' as <method>, you need to provide this file.

=for Euclid:
   rfam_cm.type: readable

=item -f <rfam_fasta>

Path to the Rfam database FASTA file. Only valid with 'rfam_scan' as <method>. 
Providing this file will speed up the rfam_search.

=for Euclid:
   rfam_fasta.type: readable

=item -t <num_threads>

Number of threads to use simultaneously. Default: num_threads.default

=for Euclid:
   num_threads.type: 0+int
   num_threads.default: 1

=back

=head1 AUTHORS

Florent Angly <florent.angly@gmail.com>

Adam Skarshewski

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012 Florent Angly and Adam Skarshewski

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use threads;
use threads::shared;
use Thread::Queue;
use Getopt::Euclid qw(:minimal_keys);
use Bio::SeqIO;
use Bio::PrimarySeq;
use Bio::DB::Fasta;
use File::Spec;
use IPC::Run qw( run );

my $stdout_mutex :shared;

extract_ssu_seqs($ARGV{'d'}, $ARGV{'i'}, $ARGV{'m'}, $ARGV{'c'}, $ARGV{'f'}, $ARGV{'t'});
exit;


sub extract_ssu_seqs {
   my ($dirs, $img_metadata, $method, $rfam_cm, $rfam_fasta, $num_threads) = @_;
   # Sanity checks
   if ( ($method eq 'infernal') || ($method eq 'rfam_scan') ) {
      if (not defined $rfam_cm) {
         die "Error: Need to provide an RFAM CM file to use with method $method\n";
      }
   }
   # Read what kingdom each belongs to
   my $kingdoms = read_kingdom($img_metadata);
   # Split RFAM files: one file for each kingdom
   my ($rfam_cms, $rfam_fastas);
   if (defined $rfam_cm) {
      # Get SSU only, split by kingdom
      ($rfam_cms, my $accs) = split_rfam_cm($rfam_cm);
      if ( defined $rfam_fasta ) {
         # Split RFAM FASTA database by kingdom
         $rfam_fastas = split_rfam_fasta($rfam_fasta, $accs);
      }
   }
   # List all valid IMG directories
   my $img_dirs = Thread::Queue->new();
   for my $input_dir (@$dirs) {
      opendir my $dh, $input_dir or die "Error: Could not read folder $input_dir\n$!\n";
      while (my $img_id = readdir $dh) {
         my $in_fasta = File::Spec->catfile($input_dir, $img_id, $img_id.'.fna');
         next if not -e $in_fasta; # not an IMG genome folder
         $img_dirs->enqueue( File::Spec->catfile($input_dir, $img_id) );
      }
      closedir $dh;
   }
   # Start processing of genomes on multiple threads simultaneously
   my %seen :shared;
   my @threads;
   for my $i (1 .. $num_threads) {
      my $thr = threads->create(\&worker, $img_dirs, \%seen, $method, $kingdoms, $rfam_cms, $rfam_fastas);
      if (not defined $thr) {
         die "Error: Could not create thread\n$!\n";
      }
      $img_dirs->enqueue(undef);
      push @threads, $thr;
   }
   # Wait for all threads to finish their work
   for my $thr (@threads) {
      $thr->join();
   }
   # Cleanup time
   for my $file (keys %{$rfam_cms}, keys %{$rfam_fastas}) {
      unlink $file;
   }
   return 1;
}


sub worker {
   my ($img_dirs, $seen, $method, $kingdoms, $rfam_cms, $rfam_fastas) = @_;
   # Each worker thread processes genomes as long as there are some left.
   DIR: while ( my $img_dir = $img_dirs->dequeue() ) {
      # Skip processing if dir was an already-processed, duplicate dir
      my $img_id = ( File::Spec->splitdir($img_dir) )[-1];
      {
         lock $seen;
         if (exists $seen->{$img_id}) {
            next DIR;
         } else {
            $seen->{$img_id} = undef;
         }
      }
      # Find kingdom of this genome
      my $in_fasta = File::Spec->catfile($img_dir, $img_id.'.fna');
      my $kingdom = $kingdoms->{$img_id};
      if (not defined $kingdom) {
         warn "Warn: No kingdom found for IMG genome $img_id ($in_fasta). Skipping it...\n";
         next;
      }
      # Run RNAmmer, INFERNAL or rfam_scan on genome, or trust IMG SSU annotations
      my $temp_fasta = $$.'_'.$img_id.'.fa';
      if ($method eq 'img') {
         extract_from_img($kingdom, $img_dir, $temp_fasta, $img_id);
      } elsif ($method eq 'rfam_scan') {
         run_rfam_scan($kingdom, $in_fasta, $temp_fasta, $rfam_cms, $rfam_fastas);
      } elsif ($method eq 'infernal') {
         run_infernal($kingdom, $in_fasta, $temp_fasta, $rfam_cms);
      } elsif ($method eq 'rnammer') {
         run_rnammer($kingdom, $in_fasta, $temp_fasta);
      } else {
         die "Error: Unsupported method '$method'\n";
      }
      # Add sequences to existing FASTA stream on stdout
      my $seq_count = append_seqs($temp_fasta, $img_id);
      warn "Info: Extracted $seq_count SSU sequences from genome $img_id ($in_fasta)\n";
      unlink $temp_fasta;
   }
   return 1;
}


sub extract_from_img {
   my ($kingdom, $img_dir, $out_fasta, $img_id) = @_;
   my %king2acc = (
      bac => '16S',
      arc => '16S',
      euk => '18S',
   );
   $kingdom = $king2acc{$kingdom} or die "Error: No 16S/18S rRNA gene for kingdom $kingdom\n";
   my %genomes;
   my $out_fh = Bio::SeqIO->new(
      -file   => '>'.$out_fasta,
      -format => 'fasta',
      -flush  => 0, # go as fast as possible
   );
   my $gff_file = File::Spec->catfile($img_dir, "$img_id.gff");
   if (-e $gff_file) {
      open my $fh, '<', $gff_file or die "Error: Could not read file $gff_file\n$!\n";
      while (my $line = <$fh>) {
         chomp $line;
         my @splitline = split /\t/, $line;
         if (scalar @splitline < 9) {
            next;
         }
         if ($splitline[2] eq 'rRNA') {
            if ($splitline[8] =~ /$kingdom/i && $splitline[8] =~ /ID=(\d+)/) {
               my $gene_id = $1;
               $genomes{$gene_id} = $img_id;
            }
         }
      }
      close $fh;
      my $fasta_file = File::Spec->catfile($img_dir, "$img_id.genes.fna");
      if (-e $fasta_file) {
         my $in_fh = Bio::SeqIO->new(
            -file   => $fasta_file,
            -format => 'fasta',
         );
         while (my $seq_obj = $in_fh->next_seq()) {
            my $gene_id   = $seq_obj->id();
            my $genome_id = $genomes{$gene_id};
            if (defined $genome_id) {
               # Rename read as <genomeid>_<geneid>
               my $new_id = $genome_id.'_'.$gene_id;
               $seq_obj->id($new_id);
               $out_fh->write_seq($seq_obj)
            }
         }
         $in_fh->close;
      }
   }
   $out_fh->close;
   return 1;
}


sub append_seqs {
   my ($in_fasta, $genome_id) = @_;
   # Append sequences to stdout, renaming them by genome ID.
   lock $stdout_mutex; # wait until no other thread is writing on stdout
   my $in = Bio::SeqIO->new( -file => $in_fasta, -format => 'fasta' );
   my $out = Bio::SeqIO->new(
      -fh     => \*STDOUT,
      -format => 'fasta',
      -flush  => 0, # go as fast as possible
   );
   my $seq_count = 0;
   while (my $seq = $in->next_seq) {
      $seq_count++;
      $seq->id( $genome_id.'_'.$seq_count );
      $out->write_seq($seq);
   }
   $out->close;
   $in->close;
   return $seq_count;
}


sub run_rnammer {
   my ($kingdom, $in_fasta, $out_fasta) = @_;
   # Run RNAmmer on a genome
   # Usage: rnammer [options] <sequence>
   #    -S         Super kingdom of the input sequence: 'arc', 'bac', or 'euk'
   #    -gff file  Filename for GFF2-formatted output
   #    -multi     Runs all molecules and both strands in parallel
   #    -f fasta   Filename for FASTA-formatted output (rRNA sequences found)
   #    -m         Molecule type: 'tsu' for 5/8s rRNA, 'ssu' for 16/18s rRNA,
   #               'lsu' for 23/28s rRNA or any combination separated by comma.
   my $cmd = ['rnammer', '-m', 'ssu', '-S', $kingdom, '-f', $out_fasta, $in_fasta];
   run $cmd or die "Error: RNAmmer failed\n$?\n";
   return 1;
}


sub run_infernal {
   my ($kingdom, $in_fasta, $out_fasta, $rfam_cms) = @_;
   # Run INFERNAL of a genome against SSU for a given domain (euk, bac or arch)
   my $rfam_cm = $rfam_cms->{$kingdom};
   my $tbl_file = "$$.tbl";
   my $out_file = "$$.out";
   my $cmd = ['cmsearch', '--rfam', '--cut_ga', '--tblout', $tbl_file, '-o', $out_file, $rfam_cm, $in_fasta];
   run $cmd or die "Error: INFERNAL failed\n$?\n";
   unlink $out_file;
   parse_infernal_table($tbl_file, $in_fasta, $out_fasta);
   unlink $out_file;
   return 1;
}


sub run_rfam_scan {
   my ($kingdom, $in_fasta, $out_fasta, $rfam_cms, $rfam_fastas) = @_;
   # Run rfam_scan of a genome against SSU for a given domain (euk, bac or arch)
   my $rfam_cm    = $rfam_cms->{$kingdom};
   my $rfam_fasta = $rfam_fastas->{$kingdom};
   # Run rfam_scan
   my $out_gff = "$out_fasta.gff";
   my $cmd = ['rfam_scan', '-o', $out_gff, '--blastdb', $rfam_fasta, $rfam_cm, $in_fasta];
   my ($in, $out, $err);
   run $cmd, \$in, \$out, $err or die "Error: rfam_scan failed\n$?\n";
   # Parse GFF3 output of rfam_scan
   extract_gff_feats($out_gff, $in_fasta, $out_fasta);
   unlink $out_gff;
   return 1;
}


sub extract_gff_feats {
   my ($gff_in, $fasta_in, $fasta_out) = @_;
   # Given a FASTA file and its features in a GFF file. Extract the sequence of
   # the GFF features and add then to an existing FASTA file
   my $db = Bio::DB::Fasta->new($fasta_in, -clean => 1);
   open my $in, '<', $gff_in or die "Error: Could not read file $gff_in\n$!\n";
   my $out = Bio::SeqIO->new( -file => '>>'.$fasta_out, -format => 'fasta' );
   my $gene_count = 0;
   while ( my $line = <$in> ) {
      chomp $line;
      # Skip comment lines
      next if $line =~ m/^#/;
      # NZ_AJO51018	Rfam	similarity	19837	21385	1557.0	+	1	bias=16.0;evalue=0;...
      my @fields = split /\t/, $line;
      next if scalar @fields != 9;
      my ($seqid, $source, $type, $start, $end, $score, $strand, $phase, $attr) = @fields;
      # Get 16S sequence from genome
      $gene_count++;
      my $seq = Bio::PrimarySeq->new(
         -id  => $seqid.':'.$start.','.$end.'/'.$strand,
         -seq => $db->seq($seqid, $start, $end, $strand),
      );
      $out->write_seq( $seq );
   }
   close $in;
   $out->close;
   return 1;
}


sub parse_infernal_table {
   my ($tbl_file, $in_fasta, $out_fasta) = @_;
   # Parse INFERNAL output, <= 1.0.2 (legacy), or >= 1.1 (new)
   my $db = Bio::DB::Fasta->new($in_fasta, -clean => 1);
   my $out = Bio::SeqIO->new(-file => '>'.$out_fasta, -format => 'fasta');
   open my $in, '<', $tbl_file or die "Error: Could not read file $tbl_file\n$!\n";
   my ($rfamid, $rfamname);
   my $legacy_re = qr/^\s*(\S*)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\d+)$/;
   # First field (the model) is optional
   my $curr_re   = qr/^(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(.+)$/;
   # target_name, target_accession, query_name, query_accession, model, model_from, model_to, seq_from, seq_to, strand, trunc, pass, gc, bias, score, E-value, inc, target_description
   while (<$in>) {
      # Skip comment lines
      next if /^\#/;
      # Parse a line with an INFERNAL match
      my ($model, $seqid, $seqname, $start, $end, $modst, $moden, $strand,
          $trunc, $pass, $gc, $bias, $bits, $evalue, $inc, $desc);
      my $match = 0;
      if ( ($seqid, $seqname, $rfamid, $rfamname, $model, $modst, $moden, $start, $end, $strand, $trunc, $pass, $gc, $bias, $bits, $evalue, $inc, $desc) = m/$curr_re/ ) {
         $match = 1;
      } elsif ( ($model, $seqid, $start, $end, $modst, $moden, $bits, $evalue, $gc) = m/$legacy_re/ ) {
         $match = 1;
      }
      if ($match) {
         # Set strand based on start and end coordinates
         if ($end < $start) {
            ($start, $end) = ($end, $start);
            $strand = -1;
         } else {
            $strand = 1;
         }
         # Extract the sequence
         my $seq = $db->get_Seq_by_id($seqid)->trunc($start, $end);
         $seq = $seq->revcom if $strand == -1;
         # Write the sequence
         $out->write_seq($seq);
      }
   }
   close $in;
   $out->close;
   return 1;
}


sub split_rfam_fasta {
   my ($rfam_fasta, $id2king) = @_;
   # Split the RFAM FASTA database. Get only the SSU sequences. Put the ones
   # from eukaryotes, bacteria and archaea in three separate files.
   my @ids = keys %{$id2king};
   my $fasta_files = filter_seq_file($rfam_fasta, \@ids);
   for my $id (keys %{$fasta_files}) {
      my $king = $id2king->{$id};
      $fasta_files->{$king} = delete $fasta_files->{$id};
   }
   return $fasta_files;
}


sub split_rfam_cm {
   my ($rfam_cm) = @_;
   # Split the RFAM CM FASTA database. Get only the SSU sequences. Put the ones
   # from eukaryotes, bacteria and archaea in three separate files.
   my %name2king = (
      SSU_rRNA_bacteria => 'bac',
      SSU_rRNA_archaea  => 'arc',
      SSU_rRNA_eukarya  => 'euk',
   );
   my @names = keys %name2king;
   my ($cm_files, $cm_accs) = filter_cm_file($rfam_cm, \@names);
   for my $name (keys %{$cm_files}) {
      my $king = $name2king{$name};
      $cm_files->{$king} = delete $cm_files->{$name};
      $cm_accs->{delete $cm_accs->{$name}} = $king;
   }
   return $cm_files, $cm_accs;
}


sub filter_cm_file {
   my ($in_file, $names) = @_;
   # Given a file of INFERNAL CM (covariance models) and some search strings,
   # extract the CMs whose NAME matches the search string and save them in a
   # file. Each search term gets a separate output file.
   open my $in_fh, '<', $in_file or die "Error: Could not read file $in_file\n$!\n";
   my (%out_fhs, %out_files, %out_accs);
   my %leftovers = map { $_ => undef } @$names;
   for my $name (@$names) {
      my $out_file = $$.'_db'.$name.'.cm.1_1';
      open my $out_fh, '>', $out_file or die "Error: Could not write file $out_file\n$!\n";
      $out_files{$name} = $out_file;
      $out_fhs{$name}   = $out_fh;
   }
   my %names = map { $_ => undef } @$names;
   my $record = 0;
   my ($cur_name, $header, $out_fh);
   while (my $line = <$in_fh> ) {
      chomp $line;
      if ( $line =~ m/^HMMER/ ) {
         $header = $line;
      } elsif ($line =~ m/^INFERNAL/ ) {
         $header = $line;
      } elsif ( $line =~ m/^NAME\s+(\S+)/ ) {
         $cur_name = $1;
         if (exists $names{$cur_name}) {
            $record = 1;
            $out_fh = $out_fhs{$cur_name};
            print $out_fh "$header\n";
            print $out_fh "$line\n";
            delete $leftovers{$cur_name};
         } else {
            $record = 0;
         }
      } elsif ($line =~ m/^ACC\S*\s+(\S+)/) {
         my $accession = $1;
         $out_accs{$cur_name} = $accession;
      } else {
         if ($record) {
            print $out_fh "$line\n";
         }
      }
   }
   $in_fh->close;
   for my $out_fh (values %out_fhs) {
      $out_fh->close;
   }
   if (scalar keys %leftovers > 0) {
      die "Error: These terms were not found in the file $in_file: ".join(' ',keys %leftovers)."\n";
   }
   return \%out_files, \%out_accs;
}


sub filter_seq_file {
   my ($in_file, $search_terms) = @_;
   # Given a file of sequences and some search strings, extract the sequences
   # whose ID matches the search string and save them in a file. Each search
   # term gets a separate output file.
   my $in_fh = Bio::SeqIO->new(
      -file => '<'.$in_file,
   );
   my $format = 'fasta'; # $in_fh->format;
   my (%out_fhs, %out_files);
   my %leftovers = map { $_ => undef } @$search_terms;
   for my $search_term (@$search_terms) {
      my $out_file = $$.'_db'.$search_term.'.'.$format;
      my $out_fh   = Bio::SeqIO->new(
         -file   => '>'.$out_file,
         -format => $format,
         -flush  => 0, # go as fast as possible
      );
      $out_files{$search_term} = $out_file;
      $out_fhs{$search_term}   = $out_fh;
   }
   while (my $seq = $in_fh->next_seq) {
      my $id = $seq->id;
      for my $search_term (@$search_terms) {
         if ($id =~ m/^$search_term/i) {
            my $out_fh = $out_fhs{$search_term};
            $out_fh->write_seq($seq);
            delete $leftovers{$search_term};
         }
      }
   }
   $in_fh->close;
   for my $out_fh (values %out_fhs) {
      $out_fh->close;
   }
   if (scalar keys %leftovers > 0) {
      die "Error: These terms were not found in the file $in_file: ".join(' ',keys %leftovers)."\n";
   }
   return \%out_files;
}


sub read_kingdom {
   my ($img_metadata) = @_;
   # Read IMG metadata file and record kingdom for each IMG genome
   my %kingdoms;
   open my $fh, '<', $img_metadata or die "Error: Could not read file $img_metadata\n$!\n";
   # Identify which column holds the domain
   my $header = <$fh>;
   chomp $header;
   my ($idcol, $domcol) = find_column_for($header, 'taxon_oid', 'Domain');
   # Parse file
   while (my $line = <$fh>) {
      chomp $line;
      next if $line =~ m/^#/;
      my @splitline = split /\t/, $line;
      my $img_id = $splitline[$idcol];
      my $domain = $splitline[$domcol];
      if ( $domain eq 'Bacteria' ) {
         $domain = 'bac';
      } elsif ( $domain eq 'Archaea' ) {
         $domain = 'arc';
      } elsif ( $domain eq 'Eukaryota' ) {
         $domain = 'euk';
      } else {
         die "Error: '$domain' is not a recognized kingdom\n";
      }
      $kingdoms{$img_id} = $domain;
   }
   close $fh;
   return \%kingdoms;
}


sub find_column_for {
   my ($header_line, @names) = @_;
   # Given a tab-separated header line, find which column matches the given name.
   # Search is insensitive to case, spaces, underscores and dashes. Also, note
   # that matches only need to be partial.
   my @fields = split /\t/, $header_line;
   # Make names and cols insensitive
   for my $arr ( \@fields, \@names ) {
      for my $i (0 .. scalar @$arr - 1) {
         $arr->[$i] =~ s/[\s_-]//g;
         $arr->[$i] = lc $arr->[$i];
      }
   }
   # Look for names in column headers
   my @col_nums;
   for my $name (@names) {
      my $col_num;
      for ($col_num = 0; $col_num < scalar @fields; $col_num++) {
         my $field = $fields[$col_num];
         if ($field =~ m/$name/) {
            push @col_nums, $col_num;
            last;
         }
      }
      if (not defined $col_num) {
         die "Error: Could not find column holding '$name' data\n";
      }
   }
   return @col_nums;
}

