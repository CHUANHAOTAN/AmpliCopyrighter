#! /usr/bin/env perl

# img_gg_matcher
# Copyright 2012-2014 Florent Angly
# You may distribute this module under the terms of the GPLv3


=head1 NAME

img_gg_matcher - Find the Greengenes ID for IMG IDs that miss it

=head1 SYNOPSIS

  img_gg_matcher -c img_to_gg.txt -i img_metadata.txt -s gg_12_10.fasta > updated_correspondances.txt

=head1 DESCRIPTION

Given a file of correspondances between IMG IDs and Greengenes ID, remove
eukaryotic IDs (Greengenes contains no eukaryotes), remove invalid Greengenes IDs
and try to find some of the missing Greengenes IDs using two methods:

=over

=item 1/

By matching names (fast). See the <desc> and <names> options.

=item 2/

By matching sequences very stringently (using BLAT, slower). See the <rrna> option.

=back

The results are written to screen in a format similar to that of the correspondance
file.

=head1 REQUIRED ARGUMENTS

=over

=item -c <corr_file>

Specify the IMG-Greengenes correspondance file. The tab-delimited correlation file
contains these columns: IMG ID (taxon_oid), GG ID. Some of these
correspondances can be extracted from IMG (http://img.jgi.doe.gov/) and GOLD
(http://www.genomesonline.org/).

=for Euclid:
   corr_file.type: readable

=item -i <img_file>

Provide an IMG metadata file can be obtained using the export function of IMG
(http://img.jgi.doe.gov/). It should have tab-delimited columns, with at least
these columns: taxon_oid, Domain, Genome Name.

=for Euclid:
   img_file.type: readable

=item -s <seq_file>

FASTA file of Greengenes 16S rRNA sequences, such as the one that can be
downloaded from the SecondGenome website at L<ftp://greengenes.microbio.me/greengenes_release/gg_12_10/gg_12_10.fasta.gz>.

=for Euclid:
   seq_file.type: readable

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -w <wrong_rm>

Remove any wrong GG ID, i.e. IDs that are not found in <seq_file>. Try to find
the matching Greengenes ID as for any other IMG genome without match. Default: wrong_rm.default

=for Euclid:
   wrong_rm.type: integer, wrong_rm == 0 || wrong_rm == 1
   wrong_rm.default: 1

=item -d <desc>

Look up names of organisms in the Greengenes FASTA file (sequence description
field) and if an organism's name is similar enough (at least at species level,
but maybe not quite at subspecies or strain level), take its Greengenes ID. The
sequence headers should look like this:

  >20 AF025822.1 Methanococcus infernus k__Archaea; p__Euryarchaeota; c__Methanococci; o__Methanococcales; f__Methanocaldococcaceae; g__Methanocaldococcus; otu_139

This method will work with Greengenes 2011 and before. Values: 1 for yes, 0 for
no. Default: desc.default

=for Euclid:
   desc.type: integer, desc == 0 || desc == 1
   desc.default: 0

=item -n <names>

Instead of <desc>, provide a file that has the names of the Greengenes isolates.
This is suitable for Greengenes 2012 and later. Get the GG SQL file, convert it
to Sqlite using mysql2sqlite.pl from L<http://stackoverflow.com/a/9857906/1050730>.
Then run: sqlite -header gg_12_10.sqlite "select gg_id, organism, strain from greengenes where decision='named_isolate';" > gg_named_isolates.txt
Use the output file as input for this option.

=for Euclid:
   names.type: readable

=item -l <sp_level>

When matching genomes by organism name (see <desc> and <names>) and that no
matching strain is found, decrease the search stringency and match at the
species level only. Values: 1 for yes, 0 for no. Note that close to 100% of the
genomes will have a match and that the sequence match (<rrna> option) step might
therefore not be needed. Default: sp_level.default

=for Euclid:
   sp_level.type: integer, sp_level == 0 || sp_level == 1
   sp_level.default: 1

=item -r <rrna>

Match the IMG 16S rRNA sequences in the provided file and compare them to
sequences in the Greengenes database (<seq_file> option). Take the Greengenes ID
of the first highly similar sequence. Using this option can increase runtime
significantly... be patient. Note that in addition to standard FASTA headers,
this file can have a more specific header that includes an IMG genome ID, an
underscore and an IMG gene ID, e.g.:

  >640753060_640862969

=for Euclid:
   rrna.type: string

=item -o <out_blat>

When <rrna> is specified, this option is used to provide a name for the output
BLAT file. If the file already exists, it is used again to avoid re-running
the BLAT step and save time. Default: out_blat.default

=for Euclid:
   out_blat.type: writable
   out_blat.default: 'blat_out.psl'

=item -mc <min_cov>

When <rrna> is specified, this option is used to select the minimum coverage
when filtering BLAT sequence matches. Default: min_cov.default %

=for Euclid:
   min_cov.type: num, min_cov >= 0 && min_cov <= 100
   min_cov.default: 99.0

=item -mi <min_idty>

When <rrna> is specified, this option is used to select the minimum identity
when filtering BLAT sequence matches. Default: min_idty.default %

=for Euclid:
   min_idty.type: num, min_idty >= 0 && min_idty <= 100
   min_idty.default: 99.0

=back

=head1 AUTHOR

Florent Angly <florent.angly@gmail.com>

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012-2014 Florent Angly

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use List::Util qw(min);
use Method::Signatures;
use Getopt::Euclid qw(:minimal_keys);
use Bio::SeqIO;
use Bio::SearchIO;
use Bio::DB::Fasta;
use Bio::Tools::Run::Alignment::Blat;
use FindBin qw($Bin);
use lib "$Bin";
use PreprocUtils;

my $DEBUG = 0;

img_gg_matcher( $ARGV{'c'}, $ARGV{'i'}, $ARGV{'s'}, $ARGV{'w'}, $ARGV{'d'},
   $ARGV{'n'}, $ARGV{'l'}, $ARGV{'r'}, $ARGV{'o'}, $ARGV{'mc'}, $ARGV{'mi'} );
exit;


func img_gg_matcher ( Str $corr_file, Str $img_file, Str $seq_file, Bool $wrong_rm,
   Bool $search_desc, $search_names, Bool $sp_level, $search_seqs, $out_blat,
   $min_cov, $min_idty ) {

   # Parse correspondance file, identify some missing IDs
   my ($correlations, $missing) = read_correspondances($corr_file);

   # Parse metadata, update list of missing IDs
   (my $names, $correlations, $missing) = read_metadata($img_file, $correlations,
      $missing);

   warn "Info: There are ".(scalar keys %$missing)." IMG IDs with missing GG ID.\n";

   # Exclude anything that is not bacterial or archaeal
   if ( (scalar keys %$missing > 0) && ($wrong_rm || $search_desc || $search_names || $search_seqs) ) {

      # Index FASTA file and sort genome names by taxa
      my ($db, $ids) = index_fasta($seq_file);

      # Remove invalid GG IDs
      if ($wrong_rm) {
         ($correlations, $missing) = remove_invalid_ids($db, $correlations, $missing);
      }

      # Find a matching name
      if ($search_desc || $search_names) {
         my $gg_taxa = gg_id_by_taxa($db, $search_desc, $search_names);
         ($correlations, $missing) = match_names($names, $correlations, $missing,
            $gg_taxa, $sp_level);
         warn "Info: There are still ".scalar(keys(%$missing))." missing IDs\n";
      }

      # Find a matching sequence
      if ($search_seqs) {
         ($correlations, $missing) = match_sequences($correlations, $missing,
             $search_seqs, $seq_file, $out_blat, $min_cov, $min_idty);
         warn "Info: There are still ".scalar(keys(%$missing))." missing IDs\n";
      }

      warn "Info: Missing IDs can be from Eukaryotes, have no match to Bacteria ".
           "or Archaea in Greengenes, or be genuinely missing.\n";

   }

   write_correspondances($correlations);

   return 1;
}


func remove_invalid_ids ($db, $correlations, $missing) {
   my $num_invalid = 0;
   for my $img_id (keys %$correlations) {
      my $gg_id = $correlations->{$img_id};
      if ( not defined $db->get_Seq_by_id($gg_id) ) {
         # This GG ID is invalid, remove it from correlations
         delete $correlations->{$img_id};
         $missing->{$img_id} = undef;
         $num_invalid++;
      }
   }
   warn "Info: Found and removed $num_invalid invalid Greengenes IDs.\n";
   return $correlations, $missing;
}


func match_sequences ($correlations, $missing, $img_fasta, $gg_fasta, $out_blat,
   $min_coverage, $min_identity) {
   # Run BLAT and only get very stringent similarities (no more than a couple bp
   # different)
   #   query : Greengenes 16S sequences
   #   target: IMG 16S sequences

   my $report;
   if (-e $out_blat) {
      warn "Info: Re-using previous BLAT results...\n";
      $report = Bio::SearchIO->new(-file => '<'.$out_blat, -format => 'psl');
   } else {
      warn "Info: Running BLAT...\n";
      my $query_fasta = filter_fasta($img_fasta, $missing);
      $report = run_blat($query_fasta, $gg_fasta, $min_identity, $out_blat);
      unlink $query_fasta;
   }

   warn "Info: Parsing BLAT results in $out_blat ($min_coverage % min coverage, ".
        "$min_identity % min identity)...\n";
   my $matches = parse_blat_results($report, $min_identity, $min_coverage);

   my $num_matches = 0;
   while ( (my $img_id, undef) = each %{$missing} ) {
      warn sprintf( "Info: Searched for sequence match for IMG ID %12s ... %s\n", $img_id, '');
      if (exists $matches->{$img_id}) {
         my $gg_id = $matches->{$img_id};
         $correlations->{$img_id} = $gg_id;
         delete $missing->{$img_id};
         $num_matches++;
         warn sprintf("Info: Found  great sequence match,     GG ID %12s ... %s\n", $gg_id, '');
      }
   }

   warn "Info: Found sequence match for $num_matches IMG IDs ".($num_matches > 0 ? ':D' : ':(((')."\n";
   return $correlations, $missing;
}


func filter_fasta ($in_fasta_file, $ids) {
   # Write a new FASTA file with only the sequence from the specified IDs in.
   my $out_fasta_file = $in_fasta_file.'.temp';
   my $in  = Bio::SeqIO->new( -file => '<'.$in_fasta_file , -format => 'fasta' );
   my $out = Bio::SeqIO->new( -file => '>'.$out_fasta_file, -format => 'fasta', -flush => 0 );
   my $num = 0;
   while (my $seq = $in->next_seq) {
      my $id = extract_img_id( $seq->id );
      if (exists $ids->{$id}) {
         # Write this sequence
         $out->write_seq($seq);
         $num++;
      }
   }
   $in->close;
   $out->close;
   if ($num == 0) {
      warn "Warn: 0 sequences in filtered FASTA file $out_fasta_file\n";
   }
   return $out_fasta_file;
}


func run_blat ($query_fasta, $db_fasta, $min_identity, $out_blat) {
   # Run Blat
   eval { require Bio::Tools::Run::Alignment::Blat; };
   if ($@) {
      die "Error: Could not find module required for BLAT search, ".
         "Bio::Tools::Run::Alignment::Blat. You need to install bioperl-run!\n";
   }
   my $factory = Bio::Tools::Run::Alignment::Blat->new(
      -db           => $db_fasta,
      -minIdentity  => $min_identity,
      #-fastMap     => 1, # not so good to find matches with a few errors
      -outfile_name => $out_blat,
   );
   my $report = $factory->run($query_fasta);
   return $report;
}


func parse_blat_results ( $report, $min_identity, $min_coverage ) {
   # Parse BLAT results and save correspondances
   my %matches;
   my ($genome_id, $genome_best_raw_score, $genome_best_target, $genome_best_custom_score);

   QUERY: while (my $result = $report->next_result) {
      my $query_id     = extract_img_id( $result->query_name );
      my $query_length = $result->query_length;

      # If we are looking at a new genome
      if ( (defined $genome_id) and (not $genome_id eq $query_id) ) {
         warn "\n" if $DEBUG;
         # If a suitable hit was found
         if (defined $genome_best_target) {
            # Save results and reset some variables
            $matches{$genome_id} = $genome_best_target;
            ($genome_id, $genome_best_raw_score, $genome_best_target, $genome_best_custom_score) =
               ($query_id, undef, undef, undef);
         }
      }
      warn "Query ".$result->query_name." (IMG ID $query_id): $query_length bp\n" if $DEBUG;

      # Go through hits by decreasing bit score
      HIT: for my $hit ( sort { $b->raw_score <=> $a->raw_score } $result->hits ) {
         my $target_length = $hit->length('hit'); # length of _target_ seq?
         my $target_score  = $hit->raw_score;
         warn "   Target GG ".$hit->name." (score: ".($hit->raw_score||'-')."  ".
            "bits: ".($hit->bits||'-')."  significance: ".($hit->significance||'-')."): ".
            "$target_length bp\n" if $DEBUG;

         # Consider hits with equal score (many of them have 100.00)
         if ( (defined $genome_best_raw_score) && ($target_score < $genome_best_raw_score) ) {
            last HIT;
         }

         while ( my $hsp = $hit->next_hsp ) {
            my $min_seq_len = min($query_length, $target_length);

            my $hsp_num_ident  = $hsp->num_identical;
            my $hsp_perc_ident = $hsp_num_ident / $min_seq_len * 100;
            warn "      NumIdentical=$hsp_num_ident  PercentId=$hsp_perc_ident\n" if $DEBUG;
            next if $hsp_perc_ident < $min_coverage;

            my $hsp_length     = min($hsp->length('query'), $hsp->length('hit'));
            my $hsp_coverage   = $hsp_length / $min_seq_len * 100;
            warn "      Length=$hsp_length  Coverage=$hsp_coverage\n" if $DEBUG;
            next if $hsp_coverage < $min_coverage;

            warn "      Hit passed filtering\n" if $DEBUG;

            # Store hit
            my $custom_score = $hsp->num_identical;
            if ( (not defined $genome_best_custom_score) || ($custom_score > $genome_best_custom_score) ) {
               warn "      Saving hit... $custom_score identical residues\n" if $DEBUG;
               ($genome_id, $genome_best_target, $genome_best_raw_score, $genome_best_custom_score) =
                  ( $query_id , $hit->name, $target_score, $custom_score);
            }
         }
      }
   }

   # Save results for last genome
   if (defined $genome_id) {
      $matches{$genome_id} = $genome_best_target;
   }

   return \%matches;
}


func index_fasta (Str $fasta_file, $temp = 0, $makeid?) {
   # Index the FASTA file for random access
   my $args = $temp ? {-reindex => 1, -clean => 1} : {-reindex => 0, -clean => 0};
   if (defined $makeid) {
      $args->{-makeid} = $makeid;
   }
   my $db = Bio::DB::Fasta->new( $fasta_file, $args );
   my @ids = $db->get_all_primary_ids;
   my $num = scalar @ids;
   warn "Info: Read $num sequences from file $fasta_file.\n";
   return $db, \@ids;
}


func parse_name ( Str $name ) {
   my $tmp_name = $name;
   my ($candidatus, $genus, $species, $strain) = ('', '', '', '');
   if ($name =~ m/^[A-Z]/) {
      # Proper scientific name is always capitalized.
      # Other names are not, e.g. 'contaminated aquifer clone WCHD3-33'

      # Remove trailing spaces (if any)
      $tmp_name     =~ s/\s*$//;
      $tmp_name     =~ s/^\s*//;

      # Fix missing spaces, as in 'Rhodobacterales sp.HTCC2255' or 'Halobacterium sp.Ch2'
      $tmp_name     =~ s/\b((?:genomo)?(?:sp|spp|species|cf)\.)([a-z0-9])/species $2/gi;

      # Expand some acronyms
      $tmp_name     =~ s/\b(?:genomo)?(?:sp|spp|species|cf)\.?\s/species /gi;
      $tmp_name     =~ s/\b(?:sub|ssp|subsp|subspecies)\.?\s/subspecies /gi;
      $tmp_name     =~ s/\b(?:str|st|strain)\.?\s/strain /gi;
      $tmp_name     =~ s/\b(?:var)\.?\s/var /gi;
      $tmp_name     =~ s/\b(?:sv|serovar)\.?\s/serovar /gi;
      $tmp_name     =~ s/\b(?:bv|biovar)\.?\s/biovar /gi;
      $tmp_name     =~ s/\b(?:pv|pathovar)\.?\s/pathovar /gi;
      $tmp_name     =~ s/\b(?:cv|cultivar)\.?\s/cultivar /gi;
      $tmp_name     =~ s/\b(?:gv|genomovar)\.?\s/genomovar /gi;
      $tmp_name     =~ s/\b(?:mv|morphovar)\.?\s/morphovar /gi;

      # Replace 'ATCC1234' or 'ATCC_1234' etc. by 'ATCC__1234'
      my $catalogs_re = 'ACM|AJ|ATCC|BCRC|BKME|CBMAI|CCEB|CCM|CCMP|CCRC|CCRI|CCT|CCTM|'.
         'CCUG|CDBB|CECT|CFBP|CGMCC|CIP|CNCTC|DSM|DSMZ|GIFU|GISK|GTC|HAMBI|HSCC|HTCC|IAM|'.
         'ICMP|ICS|IFO|IMAU|IMCC|IMET|JCM|KACC|KCTC|KS|LMD|LMG|MIT|NBRC|NCAIM|NCCB|NCDO|NCFB|NCIB|'.
         'NCIM|NCIMB|NCTC|NRRL|NRRL NRSNRS|PCC|PCM|PZH|RCC|RH|TSNRS|USCC|USDA|VTT E';
      $tmp_name     =~ s/\b($catalogs_re)(?:-|_|\.|\s|)(\d+)/$1__$2/gi;  #  Add the separator, remove it later, after massage

      # Candidatus
      $tmp_name     =~ s/^(Candidatus)\s+//gi;
      $candidatus   = $1 || '';

      # Genus
      $tmp_name     =~ s/^(\S+)\s*//gi;
      $genus        = $1 || '';

      # Species
      if ($tmp_name =~ m/^\s*(?:subspecies|strain|var|serovar|biovar|pathovar|cultivar|genomovar|morphovar)\s*/gi) {
         $species   = ''
      } else {
         $tmp_name  =~ s/^(\S+)\s*//gi;
         $species   = $1 || '';
         $species   =~ s/^\s*species\s*$//gi;
      }

      # Strain (in a broad sense)
      $strain       = $tmp_name || '';
      $strain       =~ s/^\s*:\s*//;
      $strain       =~ s/'(.*)'/$1/g;
      $strain       =~ s/^strain //;

   }
   return $candidatus, $genus, $species, $strain;
}


func massage_strain ( Str $strain ) {
   # Remove some common strings from strain name
   $strain =~ s/\b(?:strain|subspecies|var|serovar|biovar|pathovar|cultivar|genomovar|morphovar)\s*//gi;
   my $catalogs = 'ACM|AJ|ATCC|BCRC|BKME|CBMAI|CCEB|CCM|CCMP|CCRC|CCRI|CCT|CCTM|'.
      'CCUG|CDBB|CECT|CFBP|CGMCC|CIP|CNCTC|DSM|DSMZ|GIFU|GISK|GTC|HAMBI|HSCC|HTCC|IAM|'.
      'ICMP|ICS|IFO|IMAU|IMCC|IMET|JCM|KACC|KCTC|KS|LMD|LMG|MIT|NBRC|NCAIM|NCCB|NCDO|NCFB|NCIB|'.
      'NCIM|NCIMB|NCTC|NRRL|NRRL NRSNRS|PCC|PCM|PZH|RCC|RH|TSNRS|USCC|USDA|VTT E';
   $strain =~ s/\b(?:$catalogs)\s//gi;
   # Remove some non-text characters
   $strain =~ s/(?:,|;) / /gi;
   $strain =~ s/\s+/ /gi;

   #      replace / ( ) = by ''  
   #       split on ,
   #       then split on ' '

   return $strain;
}


func match_name ( Str $img_name, $genera, Bool $sp_level ) {
   my ($msg, $good_id, $good_scientific);

   my ($candidatus, $genus, $species, $strain) = parse_name($img_name);
   my $strain_clean = massage_strain( $strain );
   warn "                                                         ".
        "| $genus | $species | $strain | $strain_clean |\n" if $DEBUG;

   # Look for perfect genus, species and strain match
   my $sp_hash = $genera->{$genus}->{$species};
   for my $gg_id (keys %{$sp_hash->{$strain}}) {
      my $gg_names = $sp_hash->{$strain}->{$gg_id};
      my ($gg_scientific, $gg_strain_clean) = @$gg_names;
      $good_id = $gg_id;
      $good_scientific = $gg_scientific;
      $msg = sprintf "Info: Found perfect name match,     GG ID %12s ... %s\n", $good_id, $good_scientific;
      last;
   }

   # Look for perfect genus and species match, but approximate strain match
   if (not defined $good_id) {
      LOOKUP: for my $gg_strain (keys %{$sp_hash}) { # cannot use while loops in this code
         my $gg_hash = $sp_hash->{$gg_strain};
         for my $gg_id (keys %$gg_hash) {
            my $gg_names = $gg_hash->{$gg_id};
            my ($gg_scientific, $gg_strain_clean) = @$gg_names;

            warn "                                                         ".
                 "+ $genus + $species + $gg_strain + $gg_strain_clean +\n" if $DEBUG;

            # Try matching massaged strain name
            # Example: Lactobacillus casei LC2W
            #          Lactobacillus casei str. LC2W 
            if ($strain_clean eq $gg_strain_clean) {
               $good_id = $gg_id;
               $good_scientific = $gg_scientific;
               $msg = sprintf "Info: Found   great name match,     GG ID %12s ... %s\n", $good_id, $good_scientific;
               last LOOKUP;
            }

            for my $min_len (5,4,3,2) {

               warn "                                                            $min_len chars\n" if $DEBUG;

               for my $char ('', '-', '/') {

                  my $gg_string = $gg_strain_clean;
                  my $string    = $strain_clean;

                  if ($char) {
                     # Replace char by whitespace
                     $gg_string =~ s/$char/ /g;
                     $string    =~ s/$char/ /g;
                  }

                  # Match one part of the strain name only
                  # Example: Prochlorococcus marinus MIT9202
                  #          Prochlorococcus marinus MIT 9202 str. MIT9202 str.
                  ($good_id, $good_scientific, $msg) = match_strain_part($gg_string, $string, $gg_id, $gg_scientific, $min_len);
                  last LOOKUP if defined $good_id;
                  # Match one part of the strain name only, this time without ATCC and co
                  ($good_id, $good_scientific, $msg) = match_strain_part($gg_string, $string, $gg_id, $gg_scientific, $min_len, 'strip');
                  last LOOKUP if defined $good_id;
 
               }

            }

         }
      }
   }

   # Look for genus and species but ignore strain if specified
   if ( (not defined $good_id) && $sp_level ) {
      LOOKUP: for my $gg_strain (keys %{$sp_hash}) {
         my $gg_hash = $sp_hash->{$gg_strain};
         for my $gg_id (keys %$gg_hash) {
            my $gg_names = $gg_hash->{$gg_id};
            my ($gg_scientific, $gg_strain_clean) = @$gg_names;
            $good_id = $gg_id;
            $good_scientific = $gg_scientific;
            $msg = sprintf "Info: Found species name match,     GG ID %12s ... %s\n", $good_id, $good_scientific;
            last; # accept first strain of that species
         }
      }
   }

   warn $msg if $msg;
   return $good_id, $good_scientific;
}


func match_strain_part ($gg_strain, $strain, $gg_id, $gg_scientific, $min_len, $strip?) {
   my ($good_id, $good_scientific, $msg);
   if ($min_len <= 0) {
      die "Error: minimum length should be at least 1\n";
   }
   my %levels = (
      '4' => 'good',
      '3' => 'fair',
      '2' => '  ok',
      '1' => 'poor',
   );
   for my $gg_elem ( split ' ', $gg_strain ) {
      if ($strip) {
         $gg_elem =~ s/\S+__//g;
      }
      next if length $gg_elem < $min_len; # Skip elements shorter than required
      for my $elem ( split ' ', $strain ) {
         if ($strip) {
            $elem =~ s/\S+__//g;
         }
         next if length $elem < $min_len;

         warn "                                                         ".
              "   $gg_elem <-> $elem\n" if $DEBUG;

         if ($gg_elem eq $elem) {
            $good_id = $gg_id;
            $good_scientific = $gg_scientific;
            $min_len = $min_len > 4 ? 4 : $min_len;
            my $level = $levels{$min_len};
            $msg = sprintf "Info: Found    $level name match,     GG ID %12s ... %s\n", $good_id, $good_scientific;
         }
      }
   }
   return $good_id, $good_scientific, $msg;
}


func extract_gg_name ( Str $desc ) {
   # Extract species name from a Greengenes FASTA description, that looks like:
   #    M36507.1 Methanococcus vannielii k__Archaea; [...] ; s__Methanococcus vannielii; otu_144
   # 1/ Remove accession number (first field)
   $desc = (split /\s+/, $desc, 2)[-1] || ''; # \s+ matches one or multiple tab or spaces as delimiter
   # 2/ Remove taxonomy string (starts with k__)
   $desc =~ s/k__.*$//i;
   $desc =~ s/\s+$//;
   return $desc;
}


func extract_img_id ( Str $header ) {
   # Given a FASTA ID, extract the IMG genome ID. In addition to standard FASTA 
   # ID, the ID can be more specific and include an IMG genome ID, an underscore
   # and an IMG gene ID, e.g.: >640753060_640862969
   $header =~ s/_.*$//gi;
   return $header;
}


func gg_id_by_taxa ($gg_db, $search_desc, $search_names) {
   # Parse all Greengenes genome names and sort them by taxa.

   my $named_isolates;
   if ($search_names) {
      # Names are not in FASTA headers, but in separate file. Read them now.
      $named_isolates = read_named_isolates($search_names);
   }

   my $gg_taxa;
   my $stream = $gg_db->get_PrimarySeq_stream;
   while (my $gg_seq = $stream->next_seq) {
      my $gg_id = $gg_seq->id;
      my $gg_scientific;
      if ($search_desc) {
         $gg_scientific = extract_gg_name($gg_seq->desc || '');
      } elsif ($search_names) {
         $gg_scientific = $named_isolates->{$gg_id} || '';
      }
      my ($gg_candidatus, $gg_genus, $gg_species, $gg_strain) = parse_name($gg_scientific);
      next if not $gg_genus; # Organisms without genus are useless for us
      my $gg_strain_clean = massage_strain( $gg_strain );
      $gg_taxa->{$gg_genus}->{$gg_species}->{$gg_strain}->{$gg_id} = [$gg_scientific, $gg_strain_clean];
   }

   return $gg_taxa;
}


func match_names ( $names, $correlations, $missing, $gg_genera, $sp_level ) {
   # Find matching names
   my $num_matches = 0;
   while ( (my $img_id, undef) = each %$missing ) {
      my $img_name = $names->{$img_id};
      next if not defined $img_name;
      #warn "\n";
      warn sprintf( "Info: Searching for name match for IMG ID %12s ... %s\n", $img_id, $img_name);
      my ($gg_id, $gg_name) = match_name($img_name, $gg_genera, $sp_level);
      if ($gg_id) {
         # Found a matching GG ID
         delete $missing->{$img_id};
         $correlations->{$img_id} = $gg_id;
         $num_matches++;
      }
   }
   warn "Info: Found name match for $num_matches IMG IDs ".($num_matches > 0 ? ':D' : ':(((')."\n";
   return $correlations, $missing;
}


func read_named_isolates ($file) {
   # Read a file of named isolates (a SQLite dump) that looks like this:
   #   gg_id|organism|strain
   #   3|Methanocaldococcus jannaschii|
   #   16|Methanocaldococcus fervens AG86|AG86; DSM4213
   my %named_isolates;
   open my $in, '<', $file or die "Error: Could not read file $file\n$!\n";
   my $headers = <$in>;
   while (my $line = <$in>) {
      chomp $line;
      my ($gg_id, $organism, $strain) = split /\|/, $line;
      # Strain cleanup
      $strain =~ s/(type )?strain//g;
      # Merge species and strain to get a full name
      my $full_name;
      my $re = quotemeta($strain);
      if ($organism =~ m/$re/i) {
         $full_name = $organism;
      } else {
         $full_name = $organism.' '.$strain;
      }
      # Record full name
      $named_isolates{$gg_id} = $full_name;
   }
   close $in;
   return \%named_isolates;
}


func write_correspondances ($correlations) {
   while ( my ($img_id, $gg_id) = each %$correlations ) {
      print "$img_id\t$gg_id\n";
   }
   return 1;
}


func read_metadata ( Str $file, $correlations, $missing ) {
   # Read IMG metadata file
   my %metadata;
   open my $fh, '<', $file or die "Error: Could not read file $file\n$!\n";
   my $header = <$fh>;
   chomp $header;
   my ($idcol, $domcol, $namecol) = PreprocUtils::find_column_for($header,
      'taxon_oid', 'Domain', 'Genome Name');
   my $num = 0;
   while (my $line = <$fh>) {
      chomp $line;
      next if $line =~ m/^#/;
      $num++;
      my @splitline = split /\t/, $line;
      my $img_id = $splitline[$idcol];
      my $domain = $splitline[$domcol];
      if ( $domain !~ m/^(?:bacteria|archaea)$/i ) {
         # Keep only bacteria and archaea. Skip eukaryotes, etc.
         delete $correlations->{$img_id};
         delete $missing->{$img_id};
         next;
      }
      my $img_name = $splitline[$namecol];
      $metadata{$img_id} = $img_name;
      if (not exists $correlations->{$img_id}) {
         $missing->{$img_id} = $img_name;
      }
   }
   close $fh;
   warn "Info: Read $num entries from metadata file $file.\n";
   return \%metadata, $correlations, $missing;
}


func read_correspondances ( Str $file ) {
   # Create IMG-GG correlation hash. Get IMG IDs that do not have a
   # corresponding GG ID.
   my %correlations;
   my %missing;
   open my $fh, '<', $file or die "Error: Could not read file $file\n$!\n";
   while (my $line = <$fh>) {
      chomp $line;
      next if $line =~ m/^#/;
      my ($img_id, $gg_id) = split /\t/, $line;
      $correlations{$img_id} = $gg_id;
      if ( (not defined $gg_id) || ($gg_id =~ m/^\s*$/) ) {
         $missing{$img_id} = undef;
      }
   }
   close $fh;
   warn "Info: Read ".scalar(keys(%correlations))." entries from file $file.\n";
   return \%correlations, \%missing;
}

