#!/usr/bin/env perl

# trait_by_clade_pic
# Copyright 2012 Florent Angly
# You may distribute this module under the terms of the GPLv3


=head1 NAME

trait_by_clade_pic - Summarize a trait at different taxonomic levels using
phylogenetic independent contrasts

=head1 SYNOPSIS

  trait_by_clade_pic -f trait.txt -p gg.tree -t gg_taxo.txt > trait_summary.txt

=head1 DESCRIPTION

This script takes a trait in different species and estimates the trait value
at different taxonomic levels using the phylogenetic independent contrasts
method: Felsenstein, "Phylogenies and the comparative method" (1985)

=head1 REQUIRED ARGUMENTS

=over

=item -i <input_file>

Input file of tab-delimited traits. This file should have been generated by the
script data_combiner. This script will use the column called 'GG ID' and the
one specified by the option <trait_name>.

=for Euclid:
   input_file.type: readable

=item -p <phylo_tree>

Input Greengenes phylogenetic tree in Newick format. Note that quoted named nodes
like '100:s__Bacteroides dorei' will be converted to 's__Bacteroides dorei'

=for Euclid:
   phylo_tree.type: readable

=item -t <taxo_file>

Input Greengenes taxonomy file.

=for Euclid:
   taxo_file.type: readable

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -c <clip_tree>

Save the pruned tree in the given filename. Also, if the file already exists,
re-use it to skip the pruning step. Default: clip_tree.default

=for Euclid:
   clip_tree.type: writable
   clip_tree.default: 'pruned_tree.nw'

=item -n <trait_name>

If the input file contains several traits, select the name of the trait to use
(case-insensitive), e.g. '16S rRNA Count' or 'Genome Size'. Make sure this
matches the name of the trait as found in the input file. Default: trait_name.default

=for Euclid:
   trait_name.type: string
   trait_name.default: '16S rRNA Count'

=back

=head1 AUTHOR

Florent Angly <florent.angly@gmail.com>

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012 Florent Angly

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use Data::Dump qw(dump); ####
use Data::Dumper;        ####

use strict;
use warnings;
use Method::Signatures;
use Getopt::Euclid qw(:minimal_keys);
use Bio::Tree::Tree;
use Bio::DB::Taxonomy;
use Bio::Phylo::IO;
use Bio::Phylo::Treedrawer;
use Bio::Community::TaxonomyUtils;
use FindBin qw($Bin);
use lib "$Bin";
use PreprocUtils;

my $gg_taxonomy;
trait_by_clade_pic( $ARGV{'i'}, $ARGV{'p'}, $ARGV{'t'}, $ARGV{'c'}, $ARGV{'n'} );
exit;


func trait_by_clade_pic ( $input_file, $phylo_tree, $taxo_file, $clip_tree, $trait_name ) {

   # Read GG taxonomy (needed by get_clean_name)
   $gg_taxonomy = Bio::DB::Taxonomy->new(
      -source   => 'greengenes',
      -taxofile => $taxo_file,
   );

   # Read IMG metadata and extract gg IDs and the desired trait value
   my $id2trait = read_metadata($input_file, $trait_name);
   # Make average for GG IDs that have several genomes (several trait values)
   $id2trait = PreprocUtils::average_by_key($id2trait);

   #### Do I need to average here or not. Is it the same genome or not?
   #### Assume it is a different genome... because we do 99% clustering

   # Our very own, special GG tree
   my $tree = grow_tree($phylo_tree, $clip_tree, [keys %$id2trait], $id2trait);

   # Calculate interior node trait value using PIC
   $id2trait = pic($tree, $id2trait);

   # Calculate leaf node trait value: read GG taxonomy, convert GG IDs to GG
   # taxonomy string and make average for genomes that belong to the same species
   warn "Info: Converting GG IDs to taxonomic strings\n";
   my $gg_id2taxo = read_gg_id2taxo($taxo_file);

   warn "ID2TRAIT: ".Dumper($id2trait); ###

   my $tax2trait = convert_id_to_tax($id2trait, $gg_id2taxo);

   warn "TAX2TRAIT: ".Dumper($tax2trait); ###

   $tax2trait = PreprocUtils::average_by_key($tax2trait);

   warn "TAX2TRAIT: ".Dumper($tax2trait); ###

   #### 1/ Why so many nodes remaining after pic()?
   #### 2/ check why pruning removes internal nodes
   #### 3/ Need to have trait value for Cyano and other missing taxa
   #### 4/ Need to add reinflated trait value for taxonomic strings that were pruned
   #### 5/ Take care of 400+ GG IDs that are not in the GG taxonomy

   # Print results
   print_results($tax2trait, $trait_name);

   return 1;
}


func read_gg_id2taxo ($file) {
   my $id2taxo = PreprocUtils::read_lookup($file);
   for my $id (keys %$id2taxo) {
      my $taxo = $id2taxo->{$id};
      # Parse and clean lineage
      my $lineage_arr = Bio::Community::TaxonomyUtils::split_lineage_string($taxo);
      $taxo = Bio::Community::TaxonomyUtils::get_lineage_string($lineage_arr, 'space');
      $id2taxo->{$id} = $taxo;
   }
   return $id2taxo;
}


func print_results ($tax2trait, $trait_name) {
   # Print results, sorted by taxonomic level and alphabetically within each level
   # Sort results by taxonomic level
   my $max_level = 0;
   for my $tax_str (keys %$tax2trait) {
      # Split and clean taxonomy string to find taxonomic level
      my $lineage_arr = Bio::Community::TaxonomyUtils::split_lineage_string( $tax_str );
      my $level = scalar @$lineage_arr;
      if ($level > $max_level) {
         $max_level = $level;
      }
      # Re-assemble (cleaned) taxonomy string
      my $clean_tax_str = Bio::Community::TaxonomyUtils::get_lineage_string($lineage_arr, 'space');
      $tax2trait->{$level}->{$clean_tax_str} = $tax2trait->{$tax_str};
      delete $tax2trait->{$tax_str};
   }
   # Print results
   print "# taxonomy\t$trait_name\n";
   for my $level (1 .. $max_level) {
      my $entries = $tax2trait->{$level};
      for my $tax ( sort keys %$entries ) {
         my $val = $entries->{$tax};
         print "$tax\t$val\n";
      }
      print "\n";
   }
   return 1;
}


func convert_id_to_tax ($id_hash, $gg_taxonomy) {
   my %tax_hash;
   my $num_missing = 0;
   while ( my ($id, $val) = each %$id_hash ) {
      my $tax;
      if ( is_id($id) ) {
         # Convert GG ID to GG full taxonomic string
         $tax = $gg_taxonomy->{$id};
         if (not defined $tax) {
            $num_missing++;
            warn "Warn: Missing GG taxonomy for GG ID '$id'\n";
            next;
         }
      } else {
         # Given string is already a GG full taxonomic string
         $tax = $id;
      }

      warn $id." -> ".$tax."\n"; ###

      if (not ref $val) {
         $val = [$val];
      }

      push @{$tax_hash{$tax}}, @$val;
   }
   if ($num_missing > 0) {
      warn "Warn: Failed to convert $num_missing IDs to taxonomy\n";
   }
   return \%tax_hash;
}


func pic ($tree, $id2trait) {
   # Use phylogenetic independent contrasts method to estimate trait value for
   # interior nodes of given $tree and save this in $id2trait
   # Note: We're irremediably altering the given tree!
   
   warn "Info: Applying phylogenetic independent contrasts to tree\n";
   my $nonzero_length = 1e-5;

   my $num = 0;
   while ($tree->calc_number_of_cherries > 0) {
      $num++;
      warn "Info: round $num\n";

      # Process and remove cherries
      my $cherries = get_cherries($tree);
      while (my ($uid, $nodes) = each %$cherries) {
         # Calculate trait value for parent $pval as a weighted average of the
         # children's trait value @cvals where the weights $weis are proportional
         # to the inverse of the branch distance @dists between parent and
         # children. Hence, the trait value of a child closer to the parent
         # contributes more than the trait value of a childr that is farther away.
         my ($parent, @children) = @$nodes;
         my @cvals  = map { $_->get_generic('trait') } @children;
         my @cdists = map { 0+$_->get_branch_length || $nonzero_length } @children;
         my @weis   = map { 1 / $_ } @cdists;
         my $pval = ($cvals[0]*$weis[0] + $cvals[1]*$weis[1]) / ($weis[0]+$weis[1]);
         $parent->set_generic('trait' => $pval);

         print_cherry($nodes); ####

         # Delete children
         $parent->prune_child($children[0]);
         $parent->prune_child($children[1]);

         # Stretch parent's branch
         my $pdist = $parent->get_branch_length;
         if ( ($cdists[0] > 0) && ($cdists[1] > 0) ) {
            $pdist += $cdists[0]*$cdists[1] / ($cdists[0]+$cdists[1]);
         }
         $parent->set_branch_length($pdist);

         # Skip anonymous internal nodes
         my $pid = get_clean_name($parent); # GG ID or full taxonomic string
         next if $pid eq '';

         # Save parent's trait value:
         # Due to the imperfection of matching a taxonomy on a tree, the
         # taxonomy name can be on several nodes of the tree. Save all trait
         # values to make an average in these cases. We'll need to average later,
         # but not before all IDs have been converted to taxonomic strings (we
         # don't want to do averages of averages).
         push @{$id2trait->{$pid}}, $pval;

      }

      # Process and remove singleton leaves
      for my $leaf (@{$tree->get_terminals}) {
         my $parent = $leaf->get_parent;
         next if not $parent;
         if (scalar @{$parent->get_children} == 1) {
            my $pval = $leaf->get_generic('trait');
            $parent->set_generic('trait' => $pval);
            $parent->prune_child($leaf);
            my $pid = get_clean_name($parent); # GG ID or full taxonomic string
            next if $pid eq '';
            push @{$id2trait->{$pid}}, $pval;
         }
      }

   }

   # Wrap up and hope for a happy ending (single leaf remaining)
   my $nof_leaves = $tree->calc_number_of_terminals;
   if ($nof_leaves == 1) {
      # Print trait value for remaining node
      my $last_node = @{$tree->get_entities}[0];
      my $last_val  = $last_node->get_generic('trait');
      warn "Info: Last tree leaf had trait value $last_val. ".
         $tree->calc_number_of_internals." internal nodes left\n";
      draw_tree($tree, 'debug_last.svg'); ###
      write_tree($tree, 'debug_last.nw'); ###
   } else {
      # Error
      my $out_file = 'tree_debug.nw';
      write_tree($tree, $out_file);
      die "Error: Internal problem. There should be only one node left but there ".
          "are still $nof_leaves leaves. Wrote what's left of the tree in the Newick ".
          "file $out_file for debugging\n";
   }

   return $id2trait;
}


func get_cherries (Bio::Phylo::Forest::Tree $tree) {
   # Find the cherries in the tree and report them in a hash, keyed by the ID of
   # their parent
   my %cherries;
   for my $tip ( @{ $tree->get_terminals } ) {
      if ( my $parent = $tip->get_parent ) {
         if ( $parent->is_preterminal ) {
            my $children = $parent->get_children;
            my $pid = $parent->get_id;
            if ( (scalar @{$children} == 2) && (not exists $cherries{$pid}) ) {
               $cherries{$pid} = [$parent, @$children];
            }
         }
      }
   }
   return \%cherries;
}


func print_cherry ($cherry) {
   my ($parent, @children) = @$cherry;
   my $msg =
      "PARENT: '".
      (get_clean_name($parent)||'?')."'(uid ".$parent->get_id.")=".$parent->get_generic('trait')."\n".
      "CHILDREN: '".
      (get_clean_name($children[0])||'?')."'(uid ".$children[0]->get_id.")=".$children[0]->get_generic('trait')."  '".
      (get_clean_name($children[1])||'?')."'(uid ".$children[1]->get_id.")=".$children[1]->get_generic('trait')."\n\n";
      
   warn $msg;
   return 1;
}


func draw_tree ( Bio::Phylo::Forest::Tree $tree, $file) {
   my $treedrawer = Bio::Phylo::Treedrawer->new(
      -width  => 1200,
      -height =>  800,
      -shape  => 'rect',
      -mode   => 'phylo',
      -format => 'svg'
   );
   $treedrawer->set_tree($tree);
   open my $out, '>', $file or die "Error: Could not write file $file\n$!\n";
   print $out $treedrawer->draw;
   close $out;
   return 1;
}


func write_tree ($tree, $file) {
   open my $out, '>', $file or die "Error: Could not write file $file\n$!\n";
   print $out Bio::Phylo::IO->unparse(
      -phylo      => $tree,
      -format     => 'newick',
      -nodelabels => 1, # report name of internal nodes
   );
   close $out;
   return 1;
}


func grow_tree ($tree_file, $clip_file, $gg_ids, $id2trait) {
   # Parse Newick tree, prune it and attach trait

   # Parse Newick tree
   my $tree;
   my $num_leaves;
   if ((defined $clip_file) && (-f $clip_file)) {
      warn "Info: Parsing already-pruned tree $clip_file ...\n";
      $tree = Bio::Phylo::IO->parse(
         -file   => $clip_file,
         -format => 'newick',
      )->first;
      $num_leaves = $tree->calc_number_of_terminals();
      warn "Info: Saw $num_leaves tree leaves\n";
   } else {
      warn "Info: Cleaning tree $tree_file ...\n";
      my $tree_string = clean_newick($tree_file);

      print_tree($tree_string, 'debug1.nw');        ###

      warn "Info: Parsing tree...\n";
      $tree = Bio::Phylo::IO->parse(
         -string => $tree_string,
         -format => 'newick',
         -keep   => $gg_ids, # remove some of the nodes we won't need
      )->first;
      warn "Info: Saw ".$tree->calc_number_of_terminals()." tree leaves\n";

      #print_tree($tree, 'debug2.nw');               ###
      print_tree_nodes($tree, 'debug2_leaves.txt'); ###

      warn "Info: Pruning tree...\n";
      $tree = keep_tips_custom($tree, $gg_ids);

      $num_leaves = $tree->calc_number_of_terminals;
      warn "Info: $num_leaves tree leaves left\n";

      #print_tree($tree, 'debug3.nw');               ###
      print_tree_nodes($tree, 'debug3_leaves.txt'); ###

      # Write pruned tree if requested
      if ($clip_file) {
         warn "Info: Saving tree to $clip_file ...\n";
         write_tree($tree, $clip_file);
      }
   }

   my $num_ids = scalar keys $gg_ids;
   if ( $num_ids != $num_leaves ) {
      warn "Warn: Looks like the tree is missing ".($num_ids-$num_leaves)." GG IDs\n";
   }

   # Attach trait to nodes
   for my $leaf ( @{$tree->get_terminals} ) {
      my $gg_id = get_clean_name($leaf);
      my $val = $id2trait->{$gg_id} ||
         die "Error: Could not find trait value for tree leaf with GG ID $gg_id\n";
      ###warn "Info: Setting trait of GG ID $gg_id (uID ".$leaf->get_id.") to $val\n";
      $leaf->set_generic( 'trait' => $val );
   }

   return $tree;
}


func keep_tips_custom ($tree, $tip_names) {
   # Essentially the same as Bio::Phylo::Forest::Tree::keep_tips() but do not
   # remove internal tree nodes that are named.
   # get node objects for tips
   my @tips = @{ $tree->_get_tip_objects($tip_names) };
   # identify nodes that are somewhere on the path from tip to root
   my %seen;
   for my $tip ( @tips ) {
      my $node = $tip;
      PARENT: while ( $node ) {
         my $id = $node->get_id;
         if ( not exists $seen{$id} ) {
            $seen{$id} = $node;
            $node = $node->get_parent;
         } else {
            last PARENT;
         }            
      }
   }
   # now do the pruning
   $tree->visit_depth_first(
      '-post' => sub {
         my $n = shift;
         my $p = $n->get_parent;
         if ( not exists $seen{$n->get_id} ) {
            $p->delete($n) if $p;
            $tree->delete($n);
            return;
         }
         if ( ($n->get_name eq '') || ($n->get_name =~ m/^Node\d+$/) ) {
            # This is an anonymous node
            my @children = @{ $n->get_children };
            if ( scalar @children == 1 ) {
               # Node has a single child
               my ($c) = @children;
               my $bl  = $n->get_branch_length;
               my $cbl = $c->get_branch_length;
               $c->set_branch_length( $bl + $cbl ) if defined $cbl && defined $bl;
               $tree->delete($n);
               $c->set_parent($p);
               $p->delete($n) if $p;
            }
         }
      }
   );
   return $tree;
}


func print_tree_nodes ($tree, $file) {
   # Given a Bio::Phylo::Forest::Tree, write the name of its node in the
   # specified file name.
   open my $out, '>', $file or die "Error: Could not write file $file\n$!\n";
   for my $node (@{$tree->get_entities}) {
      print $out $node->get_id.":  ".(get_clean_name($node)||"''")."\n";
   }
   close $out;
   return 1;
}


func print_tree ($tree, $file) {
   # Given a Bio::Phylo::Forest::Tree, write its Newick representation in the
   # specified file name. Alternatively, you can pass a Newick string directly.
   my $tree_string;
   if ( ref($tree) eq 'Bio::Phylo::Forest::Tree' ) {
      $tree_string = $tree->as_string;
   } else {
      $tree_string = $tree;
   }
   open my $out, '>', $file or die "Error: Could not write file $file\n$!\n";
   print $out $tree_string;
   close $out;
   return 1;
}


func clean_newick ($file) {
   # Take a tree in a Newick file, cleans quoted node names like '100:s__Bacteroides
   # dorei' to 's__Bacteroides dorei', i.e. keep only the taxonomy name. Need to
   # keep the single-quotes because some taxon names contain semicolons.
   # Actually, also convert semicolons to '.,' because it will confuse the -keep
   # option of Bio::Phylo::IO->parse(). Also the -keep option will remove spaces
   # in an inconvenient way, e.g., 'Halorhabdus utahensis' becomes 'Halorhabdusutahensis'

   my $tree_string;
   open my $in, '<', $file or die "Error: Could not read file $file\n$!\n";
   while (my $line = <$in>) {
      # Replace semicolons and whitespaces in node names

      # In gg prior to 2012, also remove bootstrap values from internal node name
      # (they get confused with a GG ID)
      #   (570306:0.00512,574579:0.00227)63:0.00228
      # becomes
      #   (570306:0.00512,574579:0.00227):0.00228
      ####$line =~ s/'(.+?:)?(.*?)'/replace_chars("'$2'")/ge;

      # For GG >= 2012
      $line =~ s/'(.*?)'/replace_chars("'$1'")/ge;
      $line =~ s/\)\d+/)/g;
      $tree_string .= $line;
   }
   close $in;
   return $tree_string;
}


func replace_chars ($string) {
   # Replace any semicolon in the given string by '.,' and any space by '\s'
   $string =~ s/;/.,/g;
   $string =~ s/ /\\s/g;
   return $string;
}


func restore_chars ($string) {
   # Restore any '.,' to semicolon and any '\s' to space
   $string =~ s/.,/;/g;
   $string =~ s/\\s/ /g;
   return $string;
}


func get_clean_name ($node) {
   # Get node name, replace semicolons and unquote it. If the name is not an ID
   # but part of a taxonomic string, e.g. 'g__Bacteroides' or 's__Bacteroides salyersiae'
   # reconstruct the full taxonomic string
   my $name = $node->get_name;
   if ($name =~ m/^Node\d+$/) {
      $name = '';
   }
   $name = clean_name($name);

   ###warn $node->get_id.":  ".($node->get_name||"''")."  $name\n"; ###

   if ( not is_id($name) ) {
      while (1) {
         $node = $node->get_parent;
         if (not defined $node) {
            ###warn "No more parents...\n"; ###
            last;
         }

         my $parent_name = clean_name($node->get_name);

         ###warn $node->get_id.":  ".($node->get_name||"''")."  $parent_name\n"; ###

         if ( not is_id($parent_name) ) {
            $name = $parent_name.'; '.$name;
         }
      }
   }

   #### DO NOT NEED THIS ANYMORE... ####
   if ( not($name eq '') && not(is_id($name)) && not($name =~ m/^k__/) ) {
      # Taxonomic string is malformed, not sure why. Search for a fix in the GG taxonomy
      my @name_elems = split /;\s*/, $name;
      my $query = $name_elems[-1];
      my @matches = $gg_taxonomy->get_taxonids($query);
      if ( scalar @matches == 1 ) {
         my $taxon_id   = $matches[-1];
         my $taxon      = $gg_taxonomy->get_taxon($taxon_id);
         my $taxon_name = Bio::Tree::Tree->new->get_lineage_string($taxon); ###
         $taxon_name =~ s/;\s*/; /g;
         $name = $taxon_name;
      } elsif ( scalar @matches > 1 ) {
         warn "Warn: Multiple matching GG taxa for $name: ".dump(@matches)."\n";
      } # else no match
      if ( not $name =~ m/^k__/ ) {
         warn "Warn: Taxonomic string $name is suspicious; it does not start ".
              "with 'k__' and did not match anything in the GG taxonomy\n";
      }
   }

   ###warn "Name: $name\n"; ###

   return $name;
}


func is_id ($str) {
   # Returns true is given string contains only numerals 0-9
   return( ($str =~ m/[^0-9]/) ? 0 : 1 );
}


func clean_name ($name) {
   $name = restore_chars($name);
   $name =~ s/^'(.*)'$/$1/;
   $name =~ s/^"(.*)"$/$1/;
   return $name;
}


func read_metadata ( $file, $trait_name ) {
   my %id2trait;
   open my $fh, '<', $file or die "Error: Could not read file $file\n$!\n";
   my $header = <$fh>;
   chomp $header;
   my @cols = PreprocUtils::find_column_for($header, 'GG ID', $trait_name);
   warn "Info: Found trait '$trait_name' in column ".($cols[-1]+1)." of input ".
        "file $file\n";
   # Parse input file
   my $num = 0;
   while (my $line = <$fh>) {
      chomp $line;
      my ($gg_id, $trait_val) = (split /\t/, $line)[@cols];
      if ( (not defined $gg_id) || ($gg_id eq '-') ) {
         next;
      }
      if ( (not defined $trait_val) || ($trait_val eq '-') ) {
         next;
      }
      push @{$id2trait{$gg_id}}, $trait_val;
      $num++;
   }
   close $fh;
   warn "Info: Read $num entries with a GG ID and a trait value\n";
   return \%id2trait;
}

