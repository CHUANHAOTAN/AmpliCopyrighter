#!/usr/bin/env perl

# extract_img_16S
# Copyright 2012 Adam Skarshewski
# You may distribute this module under the terms of the GPLv3


=head1 NAME

extract_img_16S - Extract 16S from IMG genomes

=head1 SYNOPSIS

  extract_img_16S -i <folder_of_IMG_genomes>...

=head1 DESCRIPTION

Get 16S sequences from folders containing IMG genome folders (with GFF and gene
FASTA files). The results are written in FASTA format on stdout.

=head1 REQUIRED ARGUMENTS

=over

=item -i <input_dir>...

Input directories, containing folders of IMG genome folders.

=for Euclid:
   input_dir.type: readable

=back

=head1 AUTHOR

Adam Skarshewski

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012 Adam Skarshewski

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use Getopt::Euclid qw(:minimal_keys);
use Bio::SeqIO;
use File::Spec;


my %genomes;
my %seen;

my $out_fh = Bio::SeqIO->new(-format => 'fasta');
my $input_dirs = $ARGV{'i'};
for my $input_dir (@$input_dirs) {
   opendir my $dh, $input_dir or die "Error: Could not read folder $input_dir\n$!\n";
   while (my $entry = readdir $dh) {
      my $gff_file = File::Spec->catfile($input_dir, $entry, "$entry.gff");
      if (-e $gff_file) {
         open my $fh, '<', $gff_file or die "Error: Could not read file $gff_file\n$!\n";
         while (my $line = <$fh>) {
            chomp $line;
            my @splitline = split /\t/, $line;
            if (scalar @splitline < 9) {
               next;
            }
            if ($splitline[2] eq 'rRNA') {
               if ($splitline[8] =~ /16S/i && $splitline[8] =~ /ID=(\d+)/) {
                  my $gene_id = $1;
                 $genomes{$gene_id} = $entry;
               }
            }
         }
         my $fasta_file = File::Spec->catfile($input_dir, $entry, "$entry.genes.fna");
         if (-e $fasta_file) {
            my $in_fh = Bio::SeqIO->new(-format => 'fasta',
                                        -file   => $fasta_file);
            while (my $seq_obj = $in_fh->next_seq()) {
               my $gene_id   = $seq_obj->id();
               my $genome_id = $genomes{$gene_id};
               if (defined $genome_id) {
                  # Rename read as <genomeid>_<geneid>
                  my $new_id = $genome_id.'_'.$gene_id;
                  # Make sure we do not write duplicates
                  if (exists $seen{$new_id}) {
                     next;
                  } else {
                     $seen{$new_id} = undef;
                  }
                  $seq_obj->id($new_id);
                  $out_fh->write_seq($seq_obj)
               }
            }
         }
     }
   }
   closedir $dh;
}
$out_fh->close;

exit;
