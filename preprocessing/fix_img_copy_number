#! /usr/bin/env perl

# fix_img_copy_number
# Copyright 2012 Florent Angly
# You may distribute this module under the terms of the GPLv3


=head1 NAME

fix_img_copy_number - Fix IMG SSU copy number based on external clues

=head1 SYNOPSIS

  fix_img_copy_number -i img_metadata.csv -r rrndb.csv > img_metadata_fixed.txt

=head1 DESCRIPTION

Take an IMG metadata file (tab-delimited text file), optional rRNDB data, and
optional SSU sequences obtained by other methods (e.g. RNAmmer, INFERNAL).
Determine the SSU copy number from this information and output the corresponding
sequences.

=head1 REQUIRED ARGUMENTS

=over

=item -i <img_file>

Input IMG metadata file. The IMG metadata file can be obtained using the export
function of IMG (http://img.jgi.doe.gov/). It should tab-delimited columns. This
script will use the columns named: taxon_oid, Genome Name, Domain, Genus,
Species, 5S rRNA Count, 16S rRNA Count, 18S rRNA Count, 23S rRNA Count, 28S rRNA
Count, Scaffold Count, Genome Size, and Status.

=for Euclid:
   img_file.type: readable

=item -g <img_fasta>

SSU sequences (in FASTA format) reported by IMG. Sequence IDs should be
of the form: ><img-id>_<ssu-num>

=for Euclid:
   img_fasta.type: readable

=item -f <infernal_fasta>

SSU sequences (in FASTA format) identified by INFERNAL. Sequence IDs should be
of the form: ><img-id>_<ssu-num>

=for Euclid:
   infernal_fasta.type: readable

=item -m <rnammer_fasta>

SSU sequences (in FASTA format) identified by RNAmmer. Sequence IDs should be
of the form: ><img-id>_<ssu-num>

=for Euclid:
   rnammer_fasta.type: readable

=item -r <rrndb_file>

Input rrNDB file. Go to http://rrndb.mmg.msu.edu/search.php, click on "Get CSV".
Then convert the file from CSV to tab-separated). Expected columns are: Genus,
Species, Strain designation, 16S, ITS, 23S and 5S (but extra columns are ok).

=for Euclid:
   rrndb_file.type: readable

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -c <completeness>

What genomes to include: finished, draft, all. Default: completeness.default

=for Euclid:
   completeness.type: /(finished|draft|all)/
   completeness.default: 'all'

=item -d <discard>

Remove genomes at or above this level of dodginess (after correction): 1=dodgy,
2=very dodgy. Default: discard.default

=for Euclid:
   discard.type: integer, discard == 1 || discard == 2
   discard.default: 1

=item -t <trunc>

When counting IMG, INFERNAL or RNAmmer SSU, consider SSUs smaller than the
specified length as truncated. Note that the smallest 16S rRNA sequence in
Greengenes is 1253 bp long. Using a threshold value of 1220 seems to produce
nice results. Default: trunc.default

=for Euclid:
   trunc.type: integer
   trunc.default: 1220

=item -u <unknown>

Remove genomes with unknown genus or species: 1=yes, 0=no. Default: unknown.default

=for Euclid:
   unknown.type: integer, unknown == 0 || unknown == 1
   unknown.default: 1


=item -s <scaff>

Consider an average scaffold length above this length as very reliable, less
than 1/10th of this as dodgy and less than 1/100th very dodgy.
Default: scaff.default

=for Euclid:
   scaff.type: integer
   scaff.default: 500_000

=item -o <out_meta>

Name of file in which to save the updated IMG metadata. Default: out_meta.default

=for Euclid:
   out_meta.type: writeable
   out_meta.default: 'img_metadata_fixed.csv'

=item -n <new_rrndb>

Name of file in which to save the cleaned rrNDB data. Default: new_rrndb.default

=for Euclid:
   new_rrndb.type: writeable
   new_rrndb.default: 'rrndb_cleaned.csv'

=back

=head1 AUTHOR

Florent Angly <florent.angly@gmail.com>

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012 Florent Angly

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use Bio::SeqIO;
use Bio::DB::Fasta;
use List::Util qw(max);
use Method::Signatures;
use Getopt::Euclid qw(:minimal_keys);
use Statistics::Basic qw(mean stddev);
use FindBin qw($Bin);
use lib "$Bin";
use PreprocUtils;

$Statistics::Basic::IPRES = 8;

fix_img_copy_number( $ARGV{'i'}, $ARGV{'g'}, $ARGV{'r'}, $ARGV{'f'}, $ARGV{'m'},
   $ARGV{'c'}, $ARGV{'d'}, $ARGV{'t'}, $ARGV{'u'}, $ARGV{'s'}, $ARGV{'o'},
   $ARGV{'n'} );

exit;


func fix_img_copy_number ( Str $img_metafile, Str $img_fasta, Str $rrndb_file,
   Str $infernal_fasta, Str $rnammer_fasta, Str $completeness, Int $discard,
   Int $trunc, Int $unknown, Int $scaff_thr, Str $out_meta, Str $new_rrndb ) {
   # Read all these input files
   my $img_meta  = read_img_metadata($img_metafile, $img_fasta, $completeness,
      $trunc, $unknown);
   my $rrndb     = read_rrndb($rrndb_file, $new_rrndb);
   my $infernal  = count_genome_ssu($infernal_fasta);
   my $rnammer   = count_genome_ssu($rnammer_fasta );
   my $infernal_trunc = count_genome_ssu($infernal_fasta, $trunc);
   my $rnammer_trunc  = count_genome_ssu($rnammer_fasta , $trunc);
   # Calculate species average
   my $img_avg   = img_avg($img_meta);
   my $rrndb_avg = rrndb_avg($rrndb);
   # Detect and correct wrong copy numbers
   $img_meta = check_copy_number( $img_meta, $img_avg, $rrndb, $rrndb_avg,
      $infernal, $rnammer, $infernal_trunc, $rnammer_trunc, $scaff_thr, $discard );
   # Write updated results
   write_img_metadata( $img_meta, $img_metafile, $out_meta );
   write_ssu_seqs( $img_meta, $img_fasta, $infernal_fasta, $rnammer_fasta, $trunc);
   return 1;
}


func write_ssu_seqs ($img, $img_fasta, $infernal_fasta, $rnammer_fasta, $trunc) {
   my %dbs = (
      'img'      => Bio::DB::Fasta->new($img_fasta     , -reindex => 1),
      'infernal' => Bio::DB::Fasta->new($infernal_fasta, -reindex => 1),
      'rnammer'  => Bio::DB::Fasta->new($rnammer_fasta , -reindex => 1),
   );
   my $out = Bio::SeqIO->new(-fh => \*STDOUT, -format => 'fasta');
   while (my ($genome_id, $genome_data) = each %$img) {
      next if not exists $genome_data->{'source'}; # Genome was removed
      my $source = $genome_data->{'source'} || 'img';
      ($source, my $is_trunc) = split '_', $source, 2;
      if (not defined $is_trunc) {
         $is_trunc = '';
      }
      my $domain = $genome_data->{'domain'};
      my $type   = ($domain eq 'Eukaryota') ? '18S' : '16S';
      my $ssu    = $genome_data->{$type};
      my $db = $dbs{$source};
      for my $i (1 .. $ssu) {
         my $seq_id = $genome_id.'_'.$i;
         my $seq = $db->get_Seq_by_id($seq_id);
         if (not defined $seq) {
            if ($source eq 'img') {
               # Likely a genome listed in the metadata, but with no IMG folder
               next;
            } else {
               die "Error: Sequence $seq_id not found in $source sequences\n";
            }
         }
         # Remove truncated SSU if needed
         if ($is_trunc) {
            if ($seq->length < $trunc) {
               next;
            }
         }
         $out->write_seq($seq);
      }
   }
   $out->close;
   return 1;
}


func write_img_metadata ($img, $input_meta, $output_meta) {
   # Write IMG metadata file with updated SSU copy number
   open my $in , '<', $input_meta  or die "Error: Could not read file $input_meta\n$!\n";
   open my $out, '>', $output_meta or die "Error: Could not write file $output_meta\n$!\n";
   # Take care of header
   my $header = <$in>;
   chomp $header;
   my @cols = PreprocUtils::find_column_for($header, 'taxon_oid', 'Domain',
      '16S rRNA Count', '18S rRNA Count');
   print $out "$header\n";
   # Now the rest of the file
   while (my $line = <$in>) {
      chomp $line;
      next if $line =~ m/^#/;
      my @splitline = split /\t/, $line;
      my ($id, $domain, $S16, $S18) = @splitline[@cols];
      if ($domain eq 'Eukaryota') {
         $S18 = $img->{$id}->{'18S'}; # Eukaryal 18S
         next if not defined $S18;    # Genome was removed
      } else {
         $S16 = $img->{$id}->{'16S'}; # Bacterial/archaeal 16S
         next if not defined $S16;    # Genome was removed
      }
      @splitline[@cols] = ($id, $domain, $S16, $S18);
      print $out join("\t", @splitline)."\n";
   }
   close $in;
   close $out;
   return 1;
}


func check_copy_number ( $img, $img_avg, $rrndb, $rrndb_avg, $infernal, $rnammer, 
   $infernal_trunc, $rnammer_trunc, $scaff_thr, $discard_lvl ) {

   my %levels = (
      1 =>      '', # dodgy
      2 => 'very ', # very dodgy
   );
   my $lvl_str = $levels{$discard_lvl};

   my $num_dodgy = 0;
   my $num_very_dodgy = 0;
   my $num_resolved = 0;
   my $num_very_resolved = 0;
   my $num_removed = 0;
   for my $id (keys %$img) {
      # Determine if IMG copy number is dodgy
      my $is_dodgy = is_dodgy($id, $img, $rrndb_avg, $infernal, $rnammer, $scaff_thr);
      if ($is_dodgy == 1) {
         $num_dodgy++;
      } elsif ($is_dodgy == 2) {
         $num_very_dodgy++;
      }
      # Try to fix copy number
      if ( $is_dodgy ) {
         my $is_resolved = resolve_copy_number($id, $img, $img_avg, $rrndb_avg,
            $rrndb_avg, $infernal, $rnammer, $infernal_trunc, $rnammer_trunc,
            $scaff_thr, $is_dodgy, $discard_lvl);
         if ($is_resolved) {
            if ($is_dodgy == 1) {
              $num_resolved++;
            } elsif ($is_dodgy == 2) {
              $num_very_resolved++;
            }
         } else {
            if ($is_dodgy >= $discard_lvl) {
               # If it was more dodgy than what is desired and could not be
               # fixed, remove it
               delete $img->{$id};
               $num_removed++;
               warn "Warn: Copy number of genome ID $id was ".$lvl_str."dodgy, ".
                  "could not be corrected, and was thus removed.\n";
            }
         }
      }
   }
   warn "Info: Found $num_dodgy and $num_very_dodgy IMG genomes with dodgy and very dodgy SSU counts\n";
   warn "Info: Resolved $num_resolved dodgy and $num_very_resolved very dodgy counts.\n";
   warn "Info: Deleted $num_removed genomes with ".$lvl_str."dodgy counts that could not be resolved.\n";
   return $img;
}


func resolve_copy_number ($id, $img, $img_avg, $rrndb, $rrndb_avg, $infernal,
   $rnammer, $infernal_trunc, $rnammer_trunc, $scaff_thr, $is_dodgy, $discard_lvl) {

   my $source;
   my $correct;
   my $resolved      = 0;
   my $img_data      = $img->{$id};
   my $name          = $img_data->{'name'};
   my $domain        = $img_data->{'domain'};
   my $genus         = $img_data->{'genus'};
   my $species       = $img_data->{'species'};
   my $scaff         = $img_data->{'scaff'};
   my $length        = $img_data->{'length'};
   my $avg_scaff_len = $img_data->{'avg_scaff_len'};
   my @types         = ($domain eq 'Eukaryota') ? ('18S', '5S', '28S') : ('16S', '5S', '23S');
   my $img_1XS_ssu   = $img_data->{$types[0]}; # 16S or 18S
   my $img_5S_ssu    = $img_data->{$types[1]}; # 5S
   my $img_2XS_ssu   = $img_data->{$types[2]}; # 23S or 28S
   my $rrndb_ssu_avg = $rrndb_avg->{'Bacteria'}->{$genus}->{$species}->{$types[0]}->{'avg'};

   for my $trunc_str ('', 'truncated') {

      # Get SSU copy number, with or without truncated SSU sequences
      my ($infernal_ssu, $rnammer_ssu);
      if ($trunc_str eq 'truncated') {
         $infernal_ssu  = $infernal_trunc->{$id};
         $rnammer_ssu   = $rnammer_trunc->{$id};
      } else {
         $infernal_ssu  = $infernal->{$id};
         $rnammer_ssu   = $rnammer->{$id};
      }

      my $reason;

      # Case 1
      if ( (not $resolved) && (defined $infernal_ssu) && (defined $rnammer_ssu) &&
           (defined $rrndb_ssu_avg) && ($infernal_ssu == $rnammer_ssu) &&
           lt_avg_ssu_diff($infernal_ssu, $rrndb_ssu_avg) ) {
         # RNAmmer, INFERNAL, rrNDB all agree. IMG is wrong.
         $correct = $infernal_ssu;
         $source = 'infernal';
         $resolved = 1;
         $reason = "$trunc_str INFERNAL ($infernal_ssu), $trunc_str RNAmmer ".
            "($rnammer_ssu) and rrNDB (species average: $rrndb_ssu_avg) all agree.\n";
      }
   
      # Case 2
      if ( (not $resolved) && (not defined $infernal_ssu) && (defined $rnammer_ssu) &&
           (defined $rrndb_ssu_avg) && lt_avg_ssu_diff($rnammer_ssu, $rrndb_ssu_avg) ) {
         # RNAmmer and rrNDB agree. INFERNAL abstained. IMG is wrong.
         $correct = $rnammer_ssu;
         $source = 'rnammer';
         $resolved = 1;
         $reason = "$trunc_str RNAmmer ($rnammer_ssu) and rrNDB (species average:".
            " $rrndb_ssu_avg) agree. INFERNAL abstained.\n";
      }

      # Case 3
      if ( (not $resolved) && (defined $infernal_ssu) && (not defined $rnammer_ssu) &&
           (defined $rrndb_ssu_avg) && lt_avg_ssu_diff($infernal_ssu, $rrndb_ssu_avg) ) {
         # INFERNAL and rrNDB agree. RNAmmer abstained. IMG is wrong.
         $correct = $infernal_ssu;
         $source = 'infernal';
         $resolved = 1;
         $reason = "$trunc_str INFERNAL ($infernal_ssu) and rrNDB (species average:".
           " $rrndb_ssu_avg) agree. RNAmmer abstained.\n";
      }

      # Case 4
      if ( (not $resolved) && (defined $infernal_ssu) && (defined $rnammer_ssu) &&
           (not defined $rrndb_ssu_avg) && ($avg_scaff_len >= $scaff_thr) &&
           ($infernal_ssu == $rnammer_ssu) ) {
         # We have long (more reliable) contigs, rrNDB abstained, INFERNAL and RNAmmer agree
         if ( (defined $infernal_ssu) && (defined $rnammer_ssu) && ($infernal_ssu == $rnammer_ssu) ) {
            $correct = $infernal_ssu;
            $source = 'infernal';
            $resolved = 1;
            $reason = "$trunc_str INFERNAL ($infernal_ssu) and $trunc_str RNAmmer".
               " ($rnammer_ssu) agree. rrNDB abstained but average contig length".
               " was at least $scaff_thr bp.\n";
         }
      }

      # Case 5
      if ( (not $resolved) && ($img_1XS_ssu == 0) && (not defined $infernal_ssu) &&
           (not defined $rnammer_ssu) && (defined $rrndb_ssu_avg) && ($img_5S_ssu > 0) &&
           lt_avg_ssu_diff($img_5S_ssu, $rrndb_ssu_avg) ) {
         # If IMG 16S is 0, INFERNAL and RNAmmer missing, but 5S agrees with rrNDB
         $correct = $img_5S_ssu;
         $source = 'img';
         $resolved = 1;
         $reason = "$trunc_str IMG 5S ($img_5S_ssu) agrees with rrNDB ($rrndb_ssu_avg).\n";
      }

      # Case 6
      if ( (not $resolved) && ($img_1XS_ssu == 0) && (not defined $infernal_ssu) &&
           (not defined $rnammer_ssu) && (defined $rrndb_ssu_avg) && ($img_2XS_ssu > 0) &&
           lt_avg_ssu_diff($img_2XS_ssu, $rrndb_ssu_avg) ) {
         # If IMG 16S is 0, INFERNAL and RNAmmer missing, but 2XS agrees with rrNDB
         $correct = $img_2XS_ssu;
         $source = 'img';
         $resolved = 1;
         $reason = "$trunc_str IMG ".$types[2]." ($img_2XS_ssu) agrees with ".
            "rrNDB ($rrndb_ssu_avg).\n";
      }

      if ($trunc_str) {
         $source .= '_'.$trunc_str;
      }

      if ($resolved) {
         warn "Warn: Copy number of genome ID $id ($img_1XS_ssu) was replaced ".
            "by $correct because ".$reason;
         last;
      }
   }

   if ( (not $correct) && ($is_dodgy >= $discard_lvl) ) {
      # Show data for copy numbers that could not be corrected
     show_evidence($id, $img, $img_avg, $rrndb, $rrndb_avg, $infernal, $rnammer);
   }

   if ($correct) {
      $img_data->{$types[0]} = $correct;
      $img_data->{'source'}  = $source;
   }

   return $resolved;
}


func show_evidence ($id, $img, $img_avg, $rrndb, $rrndb_avg, $infernal, $rnammer) {
   my $fmt = '%.1f'; # 1 decimal point
   my $domain        = $img->{$id}->{'domain'};
   my $genus         = $img->{$id}->{'genus'};
   my $species       = $img->{$id}->{'species'};
   my $name          = $img->{$id}->{'name'};
   my $status        = $img->{$id}->{'status'};
   my $scaff         = $img->{$id}->{'scaff'};
   my $length        = $img->{$id}->{'length'};
   my $avg_scaff_len = sprintf($fmt, $img->{$id}->{'avg_scaff_len'});

   my @traits;
   if ($domain eq 'Eukaryota') {
      @traits = ('18S', '5S', '28S', 'ITS');
   } else {
      @traits = ('16S', '5S', '23S', 'ITS');
   }
   # Stats for this genome
   my @vals;
   my $evi = '';
   $evi .= "  $name (ID $id): $domain, $status, $scaff scaffolds, $length bp, avg $avg_scaff_len bp / scaffold\n";
   $evi .= "       Type\t".join("\t",@traits)."\n";
   # IMG
   @vals = map { defined $img->{$id}->{$_} ?
                 $img->{$id}->{$_} :
                 '-'
               } @traits;
   $evi .= "        IMG\t".join("\t",@vals)."\n";
   # RNAmmer
   @vals = (defined $rnammer->{$id} ? $rnammer->{$id} : '-', '-', '-', '-');
   $evi .= "    RNAmmer\t".join("\t",@vals)."\n";
   # INFERNAL
   @vals = (defined $infernal->{$id} ? $infernal->{$id} : '-', '-', '-', '-');
   $evi .= "   INFERNAL\t".join("\t",@vals)."\n";
   # IMG species average
   @vals = map { defined $img_avg->{$domain}->{$genus}->{$species}->{$_}->{'avg'} ?
                 sprintf($fmt, $img_avg->{$domain}->{$genus}->{$species}->{$_}->{'avg'}) :
                 '-'
               } @traits;
   $evi .= "    IMG avg\t".join("\t",@vals)."\n";
   # rrNDB species average
   @vals = map { defined $rrndb_avg->{'Bacteria'}->{$genus}->{$species}->{$_}->{'avg'} ?
                 sprintf($fmt, $rrndb_avg->{'Bacteria'}->{$genus}->{$species}->{$_}->{'avg'}) :
                 '-'
               } @traits;
   $evi .= "  rrNDB avg\t".join("\t",@vals)."\n";
   $evi .= "\n";
   warn $evi;
   return 1;
}


func ssu_thr ($mean_copy) {
   # Using rrNDB, it looks like there is a linear relation between the max
   # difference D between a copy number for a genome and the average copy number
   # X of the species that this genome is from:
   #    at X =  3.25, D = 1
   #    at X = 12.5 , D = 2
   # Or: D = 0.10811 X + 0.64865
   return 0.125 * $mean_copy + 0.438;
}


func lt_avg_ssu_diff ($copy_num, $mean_copy, Int $mult = 1) {
   # Check that the difference between the given copy number and species average
   # is under the maximum allowed threshold (w 20% error margin)
   if ( delta($copy_num, $mean_copy) < 1.2 * $mult * ssu_thr($mean_copy) ) {
      return 1;
   } else {
      return 0;
   }
}


func lt_ssu_diff ($copy_num_1, $copy_num_2) {
   # Check that the difference between the two given copy numbers is under the
   # maximum allowed. (2*ssu_thr because ssu_thr is between avg and extreme,
   # not two values)
   if ( delta($copy_num_1,$copy_num_2) < 2*ssu_thr(max($copy_num_1,$copy_num_2)) ){
      return 1;
   } else {
      return 0;
   }
}

func is_dodgy ($id, $img, $rrndb_avg, $infernal, $rnammer, $scaff_thr, Int $silent = 0) {
   # Compare IMG Copy number to INFERNAL, RNAmmer and rrNDB to determine if it is
   # likely correct.
   my $msg;
   my $is_dodgy      = 0; # 0: not dodgy, 1: dodgy, 2: very dodgy
   my $min_count     = 1;
   my $max_count     = 15;
   my $img_data      = $img->{$id};
   my $domain        = $img_data->{'domain'};
   my $genus         = $img_data->{'genus'};
   my $species       = $img_data->{'species'};
   my $scaff         = $img_data->{'scaff'};
   my $length        = $img_data->{'length'};
   my $avg_scaff_len = $img_data->{'avg_scaff_len'};
   my $type          = ($domain eq 'Eukaryota') ? '18S' : '16S';
   my $img_ssu       = $img_data->{$type};

   if ( $img_ssu < $min_count ) {
      $msg = "very dodgy: too low\n";
      $is_dodgy = 2;
   }

   if ( $img_ssu > $max_count ) {
      $msg = "very dodgy: too high\n";
      $is_dodgy = 2;
   }

   my $infernal_ssu = $infernal->{$id};
   if ( (defined $infernal_ssu) && ($infernal_ssu != $img_ssu) ) {
      $msg = "dodgy: different".
         " from INFERNAL's ($infernal_ssu)\n";
      $is_dodgy = 1;
   }

   my $rnammer_ssu = $rnammer->{$id};
   if ( (defined $rnammer_ssu) && ($rnammer_ssu != $img_ssu) ) {
      $msg = "dodgy: different".
         " from RNAmmer's ($rnammer_ssu)\n";
      $is_dodgy = 1;
   }

   my $rrndb_ssu_avg = $rrndb_avg->{'Bacteria'}->{$genus}->{$species}->{$type}->{'avg'};
   if (defined $rrndb_ssu_avg) {
      if ( lt_avg_ssu_diff($img_ssu, $rrndb_ssu_avg, 2) ) {
         $msg = "very dodgy: very different from rrNDB's average for $genus ".
            "$species ($rrndb_ssu_avg)\n";
         $is_dodgy = 2;
      } elsif ( lt_avg_ssu_diff($img_ssu, $rrndb_ssu_avg, 1) ) {
         $msg = "dodgy: different from rrNDB's average for $genus $species ".
            "($rrndb_ssu_avg)\n";
         $is_dodgy = 1;
      }
   }

   if ($scaff > 1) {
      if ($avg_scaff_len < $scaff_thr / 100) {
         # Average scaffold length below 5_000 is very dodgy
         $msg = "very dodgy: very small average scaffold length ($scaff bp)\n";
         $is_dodgy = 2;
      } elsif ($avg_scaff_len < $scaff_thr / 10) {
         # Average scaffold length between 5_000 and 50_000 is dodgy
         $msg = "dodgy: small average scaffold length ($scaff bp)\n";
      }
   }

   #####
   # warn if different from species average in img
   #####

   if (not $silent) {
      if (defined $msg) {
         warn "Warn: Copy number of genome ID $id ($img_ssu) is ".$msg;
      }
   }

   return $is_dodgy;
}


func delta ($num1, $num2) {
   return abs($num1 - $num2);
}


func count_genome_ssu ( Str $fasta, Int $trunc = 0 ) {
   # Read a FASTA file and count the number of SSU for each genome
   my $data;
   my $in = Bio::SeqIO->new( -file => $fasta, -format => 'fasta');
   my $num_ssu = 0;
   my $curr_id;
   my $num_genomes = 0;
   my $num_seqs    = 0;
   my $num_trunc   = 0;
   while (my $seq = $in->next_seq) {
      # Sequence IDs should be of the form: ><img-id>_<ssu-num>
      my $id = $seq->id;

      # Do not count truncated SSU sequences
      if ($seq->length < $trunc) {
         $num_trunc++;
         next;
      }

      $num_seqs++;
      my ($img_id, $ssu_id) = ($id =~ m/^(\S+)_(\S+)$/);
      if ( (not defined $img_id) || (not defined $ssu_id) ) {
         die "Error: Sequence with ID $id is not of the form '><genome-id>_<ssu-id>'\n";
      }
      if ( (not defined $curr_id) || (not $img_id eq $curr_id) ) {
         # Save results for current IMG genome and start processing a new one
         if (defined $curr_id) {
            $data->{$curr_id} = $num_ssu;
         }
         $curr_id = $img_id;
         $num_ssu = 1;
         $num_genomes++;
      } else {
         $num_ssu++;
      }
   }
   $in->close;
   $data->{$curr_id} = $num_ssu;
   warn "Info: Read $num_seqs SSU sequences ($num_trunc skipped) from $num_genomes ".
      "genomes in FASTA file $fasta\n";
   return $data;
}


func rrndb_avg ( $rrndb_data ) {
   my $rrndb_avg;

   # Organize rrndb genomes by species
   while ( my ($id, $data) = each %{$rrndb_data} ) {
      my $domain  = $data->{'domain'};
      my $genus   = $data->{'genus'};
      my $species = $data->{'species'};
      my @traits = ('5S', '23S', '16S', 'ITS');
      for my $trait (@traits) {
         my $val = $data->{$trait};

         # Skip missing values
         next if not defined $val;

         push @{$rrndb_avg->{$domain}->{$genus}->{$species}->{$trait}->{'vals'}}, $val;
         push @{$rrndb_avg->{$domain}->{$genus}->{$species}->{$trait}->{'ids'}}, $id;
      }
   }

   # Calculate the average SSU per species
   while (my ($domain, $domain_data) = each %{$rrndb_avg}) {
      while (my ($genus, $genus_data) = each %{$domain_data}) {
         while (my ($species, $species_data) = each %{$genus_data}) {
            while (my ($trait, $trait_data) = each %{$species_data}) {
               my @vals = @{$rrndb_avg->{$domain}->{$genus}->{$species}->{$trait}->{'vals'}};
               $rrndb_avg->{$domain}->{$genus}->{$species}->{$trait}->{'num'} = scalar @vals;
               $rrndb_avg->{$domain}->{$genus}->{$species}->{$trait}->{'avg'} = mean(@vals)->query;
               $rrndb_avg->{$domain}->{$genus}->{$species}->{$trait}->{'std'} = stddev(@vals)->query;
            }
         }
      }
   }

   # Remove temp values
   while (my ($domain, $domain_data) = each %{$rrndb_avg}) {
      while (my ($genus, $genus_data) = each %{$domain_data}) {
         while (my ($species, $species_data) = each %{$genus_data}) {
            while (my ($trait, $trait_data) = each %{$species_data}) {
               delete $rrndb_avg->{$domain}->{$genus}->{$species}->{$trait}->{'vals'};
            }
         }
      }
   }

   return $rrndb_avg;
}


func read_rrndb ( Str $rrndb_in, Str $rrndb_out ) {
   my $rrndb_data;
   open my $in , '<', $rrndb_in  or die "Error: Could not read file $rrndb_in\n";
   open my $out, '>', $rrndb_out or die "Error: Could not write file $rrndb_out\n";
   # Identify which column holds the info we want
   my $header = <$in>;
   chomp $header;
   print $out "$header\n";
   my @cols = PreprocUtils::find_column_for($header, 'Genus', 'Species',
      'Strain designation', '16S', 'ITS', '23S', '5S', 'Status', 'Scaffold Count',
      'Genome Size');
   # Parse file
   my $num = 0;
   while (my $line = <$in>) {
      chomp $line;
      next if $line =~ m/^#/;
      next if $line =~ m/^Average/;
      $num++;
      my @splitline = split /\t/, $line;
      my ($genus, $species, $strain, $S16, $its, $S23, $S5) = clean_rrndb( @splitline[@cols] );
      print $out join("\t", $genus, $species, $strain, $S16||'', $its||'', $S23||'', $S5||'')."\n";
      my $id = $num; # make up an ID
      my $name = "$genus $species $strain";
      $rrndb_data->{$id}->{'domain'}  = 'Bacteria'; # no euks, just proks (assume bacteria)
      $rrndb_data->{$id}->{'genus'}   = $genus;
      $rrndb_data->{$id}->{'species'} = $species;
      $rrndb_data->{$id}->{'name'}    = $name;
      $rrndb_data->{$id}->{'5S'}      = $S5  if defined $S5;
      $rrndb_data->{$id}->{'23S'}     = $S23 if defined $S23;
      $rrndb_data->{$id}->{'16S'}     = $S16 if defined $S16;
      $rrndb_data->{$id}->{'ITS'}     = $its if defined $its;
   }
   close $out;
   close $in;
   warn "Info: Parsed $num species from rrNDB file\n";
   return $rrndb_data;
}


func clean_rrndb ($genus, $species, $strain, $S16, $its, $S23, $S5) {
   $S16 = undef if $S16 eq 'NA';
   $its = undef if $its eq 'NA';
   $S23 = undef if $S23 eq 'NA';
   $S5  = undef if $S5  eq 'NA';
   $species =~ s/^sp\.?$//i;      # sp.
   $strain  =~ s/^\(no .+\)$//i;  # (no designation)
   $genus   =~ s/^\(no .+\)$//i;  # (no genus)
   $genus   =~ s/^Candidatus //i;
   $genus   =~ s/ sensu stricto//i;
   $genus   =~ s/_incertae_sedis//i;
   my %repl = (
      'Escherichia/Shigella boydii'         => 'Shigella',
      'Escherichia/Shigella coli'           => 'Escherichia',
      'Escherichia/Shigella dysenteriae'    => 'Shigella',
      'Escherichia/Shigella enterocolitica' => 'Yersinia',
      'Escherichia/Shigella fergusonii'     => 'Escherichia',
      'Escherichia/Shigella flexneri'       => 'Shigella',
      'Escherichia/Shigella sonnei'         => 'Shigella',
      'GpI punctiforme'                     => 'Nostoc',
      'GpXI aeruginosa'                     => 'Microcystis',
   );
   my $full_name = $genus.' '.$species;
   if (exists $repl{$full_name}) {
      $genus = $repl{$full_name};
   }
   %repl = (
      'Rs-D17' => ['Endomicrobium', ''],
      'M18'    => ['Pseudomonas', 'aeruginosa'],
   );
   if (exists $repl{$strain}) {
      ($genus, $species) = @{$repl{$strain}};
   }
   return $genus, $species, $strain, $S16, $its, $S23, $S5;
}


func img_avg ( $img_data ) {
   my $img_avg;

   # Organize IMG genomes by species
   while ( my ($id, $data) = each %{$img_data} ) {
      my $domain  = $data->{'domain'};
      my $genus   = $data->{'genus'};
      my $species = $data->{'species'};
      my @traits;
      if ($domain =~ m/^(?:Archaea|Bacteria)$/i) {
         @traits = ('5S', '23S', '16S');
      } elsif ($domain =~ m/^Eukaryota$/i) {
         @traits = ('5S', '28S', '18S');
      } else {
         die "Error: domain '$domain' is not supported\n";
      }
      for my $trait (@traits) {
         my $val = $data->{$trait};

         # Skip values of zero (they are missing values)
         next if not $val;

         push @{$img_avg->{$domain}->{$genus}->{$species}->{$trait}->{'vals'}}, $val;
         push @{$img_avg->{$domain}->{$genus}->{$species}->{$trait}->{'ids'}}, $id;
      }
   }

   # Calculate the average SSU per species
   while (my ($domain, $domain_data) = each %{$img_avg}) {
      while (my ($genus, $genus_data) = each %{$domain_data}) {
         while (my ($species, $species_data) = each %{$genus_data}) {
            while (my ($trait, $trait_data) = each %{$species_data}) {
               my @vals = @{$img_avg->{$domain}->{$genus}->{$species}->{$trait}->{'vals'}};
               $img_avg->{$domain}->{$genus}->{$species}->{$trait}->{'num'} = scalar @vals;
               $img_avg->{$domain}->{$genus}->{$species}->{$trait}->{'avg'} = mean(@vals)->query;
               $img_avg->{$domain}->{$genus}->{$species}->{$trait}->{'std'} = stddev(@vals)->query;
            }
         }
      }
   }

   # Remove temp values
   while (my ($domain, $domain_data) = each %{$img_avg}) {
      while (my ($genus, $genus_data) = each %{$domain_data}) {
         while (my ($species, $species_data) = each %{$genus_data}) {
            while (my ($trait, $trait_data) = each %{$species_data}) {
               delete $img_avg->{$domain}->{$genus}->{$species}->{$trait}->{'vals'};
            }
         }
      }
   }

   return $img_avg;
}


func read_img_metadata ( Str $img_metadata, Str $img_fasta, Str $completeness,
   Int $trunc, Int $unknown ) {
   # Read SSU count from FASTA file
   my $img_ssus = count_genome_ssu($img_fasta, $trunc);
   # Read IMG metadata file and record some data
   my $img_data;
   open my $in, '<', $img_metadata or die "Error: Could not read file $img_metadata\n$!\n";
   # Identify which column holds the info we want
   my $header = <$in>;
   chomp $header;
   my @cols = PreprocUtils::find_column_for($header, 'taxon_oid', 'Genome Name',
      'Domain', 'Genus', 'Species', '5S rRNA Count', '16S rRNA Count',
      '18S rRNA Count', '23S rRNA Count', '28S rRNA Count', 'Scaffold Count',
      'Genome Size', 'Status');
   # Parse file
   my $num = 0;
   while (my $line = <$in>) {
      chomp $line;
      next if $line =~ m/^#/;
      $num++;
      my @splitline = split /\t/, $line;
      my ($id, $name, $domain, $genus, $species, $S5, $S16, $S18, $S23, $S28,
         $scaff, $length, $status) = @splitline[@cols];
      # Remove draft or finished genomes, as specified
      next if not status_ok($status, $completeness);
      # Remove genomes with unknown genus or species
      if ( $unknown && (not($species) || not($genus)) ) {
         next;
      }
      # Remove Candidatus everywhere to make it easier on ourself
      $name  =~ s/Candidatus //i;
      $genus =~ s/Candidatus //i;
      # Record taxonomic and SSU info
      $img_data->{$id}->{'domain'}        = $domain;
      $img_data->{$id}->{'genus'}         = $genus;
      $img_data->{$id}->{'species'}       = $species;
      $img_data->{$id}->{'name'}          = $name;
      $img_data->{$id}->{'status'}        = $status;
      $img_data->{$id}->{'scaff'}         = $scaff;
      $img_data->{$id}->{'length'}        = $length;
      $img_data->{$id}->{'avg_scaff_len'} = ($scaff == 0) ? 0 : $length / $scaff;
      if ($domain =~ m/^(?:Archaea|Bacteria)$/i) {
         $img_data->{$id}->{'5S'}  = $S5;
         $img_data->{$id}->{'23S'} = $S23;
         if (exists $img_ssus->{$id}) {
            $img_data->{$id}->{'16S'} = $img_ssus->{$id};
         } else {
            if ($S16 > 0) {
               warn "Warn: Copy number of genome ID $id not found from FASTA ".
                  "file. Using value from metadata instead ($S16)\n";
            }
            $img_data->{$id}->{'16S'} = $S16;
         }
      } elsif ($domain =~ m/^Eukaryota$/i) {
         $img_data->{$id}->{'5S'}  = $S5;
         $img_data->{$id}->{'28S'} = $S28;
         if (exists $img_ssus->{$id}) {
            $img_data->{$id}->{'18S'} = $img_ssus->{$id};
         } else {
            if ($S18 > 0) {
               warn "Warn: Copy number of genome ID $id not found from FASTA ".
                  "file. Using value from metadata instead ($S18)\n";
            }
            $img_data->{$id}->{'18S'} = $S16;
         }
      } else {
         die "Error: domain '$domain' is not supported\n";
      }
   }
   close $in;
   warn "Info: Parsed $num genomes from IMG metadata file\n";
   return $img_data;
}


func status_ok ( Str $status, Str $completeness ) {
   my $ok = 1;
   if ($completeness eq 'finished') {
      $ok = 0 if $status !~ m/finish/i;
   } elsif ($completeness eq 'draft') {
      $ok = 0 if $status !~ m/draft/i;
   } elsif ($completeness eq 'all') {
      # nothing to do
   } else {
      die "Error: unknown completeness value '$completeness'\n";
   }
   return $ok;
}

