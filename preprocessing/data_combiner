#! /usr/bin/env perl

# data_combiner
# Copyright 2012 Florent Angly and Adam Skarshewski
# You may distribute this module under the terms of the GPLv3


=head1 NAME

data_combiner - Combine IDs and other data from different sources

=head1 SYNOPSIS

  data_combiner -i img_metadata.txt -g gg_tax.txt -c img_to_gg.txt > output.txt

=head1 DESCRIPTION

Take an IMG metadata file, Greengenes taxonomy file, and IMG-GG correspondance
file and combine them into one.

The output of this script is a tab-delimited file containing these columns: IMG
ID, IMG Name, IMG Tax, GG ID, GG Tax, 16S Count, Genome Length, Gene Count.

=head1 REQUIRED ARGUMENTS

=over

=item -i <img_file>

Input IMG metadata file. The IMG metadata file can be obtained using the export
function of IMG (http://img.jgi.doe.gov/). It should have 13 tab-delimited
columns (in this order): taxon_oid, Domain, Status, Genome Name, Phylum, Class,
Order, Family, Genus, Species, Genome Size, Gene Count, 16S rRNA Count.

=for Euclid:
   img_file.type: readable

=item -g <gg_file>

Input Greengenes taxonomy file. The Greengenes taxonomy file
(http://www.secondgenome.com/go/2011-greengenes-taxonomy/) is tab-delimited and
has two columns: GG ID, GG taxonomy string.

=for Euclid:
   gg_file.type: readable

=item -c <corr_file>

IMG - Greengenes correspondance file. The tab-delimited correlation file
contains these columns: IMG ID (taxon_oid), GG ID. Some of these
correspondances can be extracted from IMG (http://img.jgi.doe.gov/) and GOLD
(http://www.genomesonline.org/).

=for Euclid:
   corr_file.type: readable

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -f <finished>

Include finished genomes only: 1 is yes, 0 is no (include draft genomes as well).
Default: finished.default

=for Euclid:
   finished.type: integer, finished == 0 || finished == 1
   finished.default: 0

=item -s <species>

Fix missing missing genus and species name in Greengenes taxonomy string when
possible: 1 is yes, 0 is no. Default: species.default

=for Euclid:
   species.type: integer, species == 0 || species == 1
   species.default: 1

=back

=head1 AUTHORS

Florent Angly <florent.angly@gmail.com>

Adam Skarshewski

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012 Florent Angly and Adam Skarshewski

Copyrighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Copyrighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Copyrighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use Method::Signatures;
use Getopt::Euclid qw(:minimal_keys);

my $num_fixed = 0;
my $spp_space = ''; # space in species name?
my $sep_space = ''; # separator ';' followed by a space?

data_combiner( $ARGV{'i'}, $ARGV{'g'}, $ARGV{'c'}, $ARGV{'f'}, $ARGV{'s'} );
exit;


func data_combiner ( $img_file, $gg_file, $corr_file, $finished, $species) {
   # Create GG taxonomies hash
   my $gg_taxonomy = read_gg_taxo( $gg_file );
   warn "Info: Read ".scalar(keys %$gg_taxonomy)." entries from taxonomy file\n";

   # Create IMG-GG correlation hash
   my $correlations = read_correlations( $corr_file );
   warn "Info: Read ".scalar(keys %$correlations)." entries from correlation file\n";

   # Substitutions
   print "#IMG ID\tIMG Name\tIMG Tax\tGG ID\tGG Tax\t16S Count\tGenome Length\tGene Count\n";
   open my $fh, '<', $img_file or die "Error: Could not read file $img_file\n$!\n";
   <$fh>; # burn headers
   my $num = 0;
   while (my $line = <$fh>) {
      chomp $line;
      next if $line =~ m/^#/;
      $num++;
      my @splitline = split /\t/, $line;
      my $domain = $splitline[1];
      my $status = $splitline[2];

      if (! (($domain eq 'Bacteria') || ($domain eq 'Archaea'))) {
         # Keep only bacteria and archaea. Skip eukaryotes, etc.
         next;
      }

      if ($finished) {
         # Keep only finished genomes. Skip draft genomes, etc.
         if (not $status eq 'Finished') {
            next;
         }
      }
    
      my $img_id      = $splitline[0];
      my $img_name    = $splitline[3];
      my $img_tax     = join(';', @splitline[4..9]);
      my $gg_id       = $correlations->{$img_id};
      my $gg_tax      = (defined($gg_id) && exists($gg_taxonomy->{$gg_id})) ? $gg_taxonomy->{$gg_id} : '-';
      my $rRNA_count  = $splitline[12];
      my $genome_size = $splitline[10];
      my $gene_count  = $splitline[11];
    
      if ($species) {
         $gg_tax = fix_gg_tax($gg_tax, $img_name);
      }

      if ((defined ($rRNA_count)) && ($rRNA_count > 0)) {
         print join("\t",(
                     $img_id,
                     $img_name,
                     $img_tax,
                     (defined($gg_id) ? $gg_id : '-'),
                     $gg_tax,
                     $rRNA_count,
                     $genome_size,
                     $gene_count
                     )), "\n";
      }

   }
   close $fh;
   warn "Info: Read $num entries from metadata file\n";
   warn "Info: Fixed $num_fixed GG taxonomy strings\n";

   return 1;
}


func read_gg_taxo ($gg_file) {
   my $gg_taxonomy;
   open my $fh, '<', $gg_file or die "Error: Could not read file $gg_file\n$!\n";
   while (my $line = <$fh>) {
      chomp $line;
      next if $line =~ m/^#/;
      my ($id, $tax_string) = split /\t/, $line;
      $gg_taxonomy->{$id} = $tax_string;
      my $species = (split /;/, $tax_string)[-1];
      if ($species =~ s/^\s+//) {
         $sep_space = ' ';
      }
      if ($species =~ m/ /) {
         $spp_space = ' ';
      }
   }
   close $fh;
   return $gg_taxonomy;
}


func read_correlations ($corr_file) {
   my $correlations;
   open my $fh, '<', $corr_file or die "Error: Could not read file $corr_file\n$!\n";
   while (my $line = <$fh>) {
      chomp $line;
      next if $line =~ m/^#/;
      my ($img_id, $gg_id) = split /\t/, $line;
      $correlations->{$img_id} = $gg_id;
   }
   close $fh;
   return $correlations;
}


func fix_gg_tax ($gg_tax, $img_name) {
    # If genus or species is missing from GG taxonomy string but present in IMG
    # name, add them to the GG taxonomy string. Abort if anything is suspicious,
    # e.g. lowercase genus, uppercase species, inconsistent genus, wrong number
    # of fields.

    my $tmp_name = $img_name;
    my $candidatus = ($tmp_name =~ s/^Candidatus\s+//i);
    my ($genus, $species, $strain) = split /\s+/, $tmp_name, 3;

    # Genus should be capitalized
    #my $msg = 'Not fixing the taxonomy string';
    if ($genus =~ /^[a-z]/) {
       # Fishy genus
       #warn "Warning: Genus $genus is lowercase. $msg\n";
       return $gg_tax;
    }

    # Species should not be capitalized
    if ($species =~ /^[A-Z]/) {
       # Fishy species
       #warn "Warning: Species $species is uppercase. $msg\n";
       return $gg_tax;
    }

    my $names = [ split /;\s*/, $gg_tax ];
    if (scalar @$names == 7) { # Proper number of fields, not simply '-'

        my $tax_genus   = $names->[-2];
        my $tax_species = $names->[-1];

        if ( ($tax_genus eq 'g__') || ($tax_species eq 's__') ) {
            # Should try to fix, but check that it is safe
            if ( (not $tax_genus eq 'g__') &&
                 (not $tax_genus eq 'g__'.($candidatus?'Candidatus ':'').$genus) ) {
                #warn "Warning: Genus disagreement for '$img_name'. Genus in taxonomy ".
                #    "string is $tax_genus. $msg\n";
            } else {
                my $fixed = 0;
 
                # Fix genus if it is known
                if ( (not $genus eq '') && ($tax_genus eq 'g__') ) {
                   $names->[-2] = 'g__'.($candidatus?'Candidatus'.$spp_space:'').
                      $genus;
                   $fixed = 1;
                }

                # Fix species if it is known
                if ( ($species !~ m/^sp\.?$/) && ($tax_species eq 's__') ) {
                   $names->[-1] = 's__'.($candidatus?'Candidatus'.$spp_space:'').
                      $genus.$spp_space.$species;
                   $fixed = 1;
                }

                $num_fixed++ if $fixed;
                $gg_tax = join ';'.$sep_space, @$names;

            }
        }
    }

    return $gg_tax;
}

