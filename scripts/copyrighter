#! /usr/bin/env perl

# This file is part of CopyRighter
# Copyright 2012-2014 Florent Angly <florent.angly@gmail.com>
# You may distribute this file under the terms of the GPLv3


=head1 NAME

CopyRighter - Correct trait bias in microbial profiles

=head1 SYNOPSIS

  copyrighter -i otu_table.qiime -o otu_table_copyrighted.generic

=head1 DESCRIPTION

The genome of Bacteria and Archaea often contains several copies of the 16S rRNA
gene. This can lead to significant biases when estimating the composition of
microbial communities using 16S rRNA amplicons or microarrays or their total
abundance using 16S rRNA quantitative PCR, since species with a large number of
copies will contribute disproportionally more 16S amplicons than species with a
unique copy. Fortunately, it is possible to infer the copy number of unsequenced
microbial species, based on that of close relatives that have been fully
sequenced. Using this information, CopyRigher corrects microbial relative
abundance by applying a weight proportional to the inverse of the estimated copy
number to each species.

In metagenomic surveys, a similar problem arises due to genome length variations
between species, and can be corrected by CopyRighter as well.

In all cases, a community file is used as input (-i option) and a corrected
community file with trait-corrected (16S rRNA gene copy number or genome length)
relative abundances is generated (-o option). Total abundance can optionally be
provided (-t option), corrected and combined with relative abundance estimates
to get the absolute abundance of each species. Also the average trait value in
each community is reported on standard output.

=head1 REQUIRED ARGUMENTS

=over

=item -i <input>

Input community file obtained from 16S rRNA microarray, 16S rRNA amplicon
sequencing or metagenomic sequencing, in biom, QIIME, GAAS, Unifrac, or generic
(tabular site-by-species) format. The file must contain read counts (not
percentages) and taxa must have B<UNALTERED> taxonomic assignments. Here is an
example of Greengenes 2012/10 taxonomic string (note the whitespace after each
semicolon):

  k__Bacteria; p__Proteobacteria; c__Alphaproteobacteria; o__Rhodospirillales; f__Rhodospirillaceae; g__Telmatospirillum; s__siberiense

See also the <data> parameter to specify your own database of trait values.

=for Euclid:
   input.type: readable

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -d <data>

Provide the file of trait estimates to use for correction. Data files of 16S
rRNA gene copy number and genome length (based on IMG 4.0 genomes mapped onto
the Oct 2012 Greengenes taxonomy) are distributed with CopyRighter. In case you
want to use an alternative data file, be aware that it should be tab-delimited
and have two columns, an ID or taxonomic string (col 1), and trait estimate (col
2), as illustrated in this example:

  # ID	16S rRNA count
  4	1.51098055313977
  7	1.51812891020048
  ...
  24084	3.41268502385832

  # taxstring	16S rRNA count
  k__Archaea; p__; c__; o__; f__; g__; s__	1.57262
  k__Archaea; p__Crenarchaeota; [...] g__Cenarchaeum; s__symbiosum	1.00000
  ...
  k__Bacteria; p__Actinobacteria; [...] g__Actinomyces; s__europaeus	1.19211

Extra columns are ignored, as well as empty lines and comment lines (starting
with #). Note that the header line can define the name of the weight used. Also,
the file can contain trait values both at the ID and taxstring level.

This argument is optional. When omitted, CopyRighter will look for the data file
location stored in the C<COPYRIGHTER_DB> environment variable. Feel free to make
this variable point to your preferred data file.

=for Euclid:
   data.type: readable
   data.default: $COPYRIGHTER_DB

=item -l <lookup>

What to match when looking up the trait value of a taxon: 'desc', use taxonomic
description, or 'id', use OTU ID (if recorded in your input community file). The
script bc_use_repr_id of Bio::Community can help in replacing arbitrary OTU IDs
by their corresponding Greengenes ID. Default: lookup.default

=for Euclid:
   lookup.type: string, lookup eq 'desc' || lookup eq 'id'
   lookup.default: 'desc'

=item -o <output>

Output path for the corrected community files (in same format as input), with
relative abundance expressed in percent. Default: output.default

=for Euclid:
   output.type: string
   output.default: 'out_copyrighted.txt'

=item -t <total>

File containing the total microbial abundance to be corrected by the average
trait value, e.g. 16S rRNA quantitative PCR numbers to be corrected by the
average 16S rRNA copy number in each community. This file should be tab-delimited
and contain two columns: community name, and total abundance. Using this option
will produce two additional output files, one containing the corrected total
microbial abundance, and other the absolute abundance of each taxon in the
<input> (in the same format as <input>): assuming an <output> called
'out_copyrighted.txt', these files will be named, respectively,
'out_copyrighted_total.tsv' and 'out_copyrighted_combined.txt'.

=for Euclid:
   total.type: readable

=item -v

Verbose mode. Display trait value assignments. You should probably use this
option and make sure that your taxa are processed as intended.

=back

=head1 AUTHOR

Florent Angly <florent.angly@gmail.com>

=head1 VERSION

0.46

=head1 BUGS

All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the bug tracker:
L<http://github.com/fangly/AmpliCopyrighter/issues>

=head1 COPYRIGHT

Copyright 2012-2014 Florent ANGLY <florent.angly@gmail.com>

CopyRighter is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
CopyRighter is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with CopyRighter.  If not, see <http://www.gnu.org/licenses/>.

=cut


use strict;
use warnings;
use 5.006;
use File::Basename;
use Env qw($COPYRIGHTER_DB);
use Scalar::Util qw(looks_like_number);
use Bio::Community::IO;
use Bio::Community::Meta;
use Bio::Community::Tools::Summarizer;
use Method::Signatures;
use Getopt::Euclid qw(:minimal_keys :defer);

our $VERSION = 0.46;

Getopt::Euclid->process_args(\@ARGV);
copyrighter( $ARGV{'i'}, $ARGV{'d'}, $ARGV{'l'}, $ARGV{'o'}, $ARGV{'t'}, $ARGV{'v'} );
exit;


func copyrighter ($input, $data, $lookup, $output, $total, $verbose = 0) {

   # Check that data file was specified
   if (not defined $data) {
      die "Error: <data> was not provided and the COPYRIGHTER_DB global ".
          "variable was not set.\n";
   } elsif (not -f $data) {
      die "Error: Your COPYRIGHTER_DB global variable points to '$COPYRIGHTER_DB',".
          " which is not a valid file.\n";
   }

   # Read input communities and do weight assignment
   my $meta = Bio::Community::Meta->new;
   print "Reading input file '$input'\n";
   my $in = Bio::Community::IO->new(
      -file              => $input,
      -weight_assign     => 'community_average',
      -weight_files      => [ $data ], # weights are the trait value
      -weight_identifier => $lookup,
   );

   my $trait_name = $in->weight_names->[0] || 'trait'; # 16S rRNA copy number or genome length, or...

   ##### strip Root and ' '

   $in->verbose($verbose);
   my $format = $in->format;
   print "Detected input format is '$format'\n";
   
   my %avgs;
   my %susp_comms;
   while (my $community = $in->next_community) {
      $meta->add_communities([$community]);

      # Report average trait value
      my $name = $community->name;
      my $avg = $community->get_average_weights->[0] || '-';
      $avgs{$name} = $avg;
      print "Average $trait_name for community '$name': $avg\n";

      # Check that a reasonable number of members were given a weight
      my $num_w_avg = 0;
      while (my $member = $community->next_member()) {
         my $weight = $member->weights->[0];
         if ( abs($weight - $avg) < 1e-10 ) { # $weight == $avg
             $num_w_avg++;
         }
      }
      my $richness = $community->get_richness;
      my $perc_ok = ($richness <= 0) ? 100 : (1 - ($num_w_avg / $community->get_richness)) * 100;
      if ($perc_ok < 70) {
         $susp_comms{$community->name} = $perc_ok;
      }

   }
   $in->close;

   my $num_susp_comms = scalar keys %susp_comms;
   if ($num_susp_comms > 0) {
      my $msg = "Warning: $num_susp_comms communities had a suspiciously small ".
         "number of OTUs with an assigned $trait_name:\n";
      while (my ($name, $perc_ok) = each %susp_comms) {
         $msg .= "   $name -> $perc_ok %\n";
      }
      $msg .= "Maybe these communities have many OTUs with no taxonomic ".
         "assignments. More likely the taxonomic assignments in the communities".
         " do not perfectly match those in the $trait_name file used.\n";
      warn $msg;
   }

   # Do the copy number correction
   my $summarized_communities = Bio::Community::Tools::Summarizer->new(
      -metacommunity => $meta,
      -merge_dups    => 0,
   )->get_summary;

   # Write results, converting to relative abundance in the process
   print "Writing relative abundances to file '$output'\n";
   write_communities($meta, $output, $format, 'percentage');

   # Read, correct, and write total abundance
   if (defined $total) {
      my ($base, $ext) = (fileparse($output, qr/\.[^.]*/))[0,2];
      my $total_outfile    = $base.'_total.tsv';
      my $combined_outfile = $base.'_combined'.$ext;

      # Read total abundances
      my ($names, $abundances, $header_line) = read_abundances($total);

      # Correct and write total abundances
      my $corr_abundances = correct_abundances($names, $abundances, \%avgs,
         $trait_name);
      print "Writing total abundances to file '$total_outfile'\n";
      write_abundances($names, $corr_abundances, $header_line, $total_outfile);

      # Add total abundances to each community
      my $corr_abundance_hash;
      for my $i (0 .. $#$names) {
         $corr_abundance_hash->{$names->[$i]} = $corr_abundances->[$i];
      }
      while (my $community = $meta->next_community) {
         my $name = $community->name;
         my $abundance = $corr_abundance_hash->{$name};
         if (not defined $abundance) {
            die "Error: No total abundance specified for community '$name'\n";
         }
         $community->set_members_abundance($abundance);
      }

      # Write species absolute abundance
      print "Writing taxa absolute abundances to file '$combined_outfile'\n";
      write_communities($meta, $combined_outfile, $format, 'absolute');
   }

   return 1;
}


func write_communities ($meta, $out_file, $format, $ab_type) {
   # Write results, converting to relative abundance in the process
   my $out = Bio::Community::IO->new(
      -format         => $format,
      -file           => '>'.$out_file,
      -abundance_type => $ab_type,
   );
   while (my $community = $meta->next_community) {
      $out->write_community($community);
   }
   $out->close;
   return 1;
}


func read_abundances ($file) {
   # Read a 2-column, tab-delimited file of abundances into two arrays
   my (@names, @abundances, @headers);
   open my $fh, '<', $file or die "Error: Could not read file $file\n$!\n";
   my $header_line;
   while (my $line = <$fh>) {
      chomp $line;
      if ( ($. == 1) && ($line =~ m/^#/) ) { 
         $header_line = $line;
         next;
      }
      next if $line =~ m/^#/;
      next if $line =~ m/^\s*$/;
      my ($name, $abundance) = split /\t/, $line;
      if (not looks_like_number($abundance)) {
         die "Error: Total abundance for community '$name', '$abundance', does not look numeric\n";
      }
      push @names , $name ;
      push @abundances, $abundance;
   }
   close $fh;
   return \@names, \@abundances, $header_line;
}


func correct_abundances ($names, $abundances, $averages, $trait_name) {
   # Divide abundances by average trait in community
   my @corr_abundances;
   for my $i (0 .. $#$names) {
      my $name      = $names->[$i] ;
      my $abundance = $abundances->[$i];
      my $average   = $averages->{$name};
      if (not defined $average) {
         die "Error: Could not correct total abundance of community '$name' ".
            "because this community is missing from <input>.\n";
      }
      push @corr_abundances, $abundance / $average;
   }
   return \@corr_abundances;
}


func write_abundances ($names, $abundances, $header_line, $out_file) {
   # Write abundances in a tab-delimited file
   open my $fh, '>', $out_file or die "Error: Could not write file $out_file\n$!\n";
   if (defined $header_line) {
      print $fh "$header_line\n";
   }
   for my $i (0 .. $#$names) {
      my $name      = $names->[$i] ;
      my $abundance = $abundances->[$i];
      print $fh "$name\t$abundance\n";
   }
   close $fh;
   return 1;
}

